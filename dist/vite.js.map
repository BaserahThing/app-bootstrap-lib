{"version":3,"sources":["../src/vite-plugin-utils.ts","../src/vite-plugin-server.ts","../src/vite.ts"],"names":["generateDevModeFiles"],"mappings":"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","file":"vite.js","sourcesContent":["/**\n * Vite Plugin Utilities\n * Created: 2024-07-31\n * Purpose: Shared utility functions for the Vite plugin\n */\n\nimport type { AppBootstrapOptions, AssetManifest } from './types';\n\nexport function generateAppBootstrap(assetManifest: AssetManifest, options: Required<AppBootstrapOptions>): string {\n    const { appName, loadingTheme, customTheme } = options;\n\n    const themeCSS = customTheme || (loadingTheme === 'gradient'\n        ? 'background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);'\n        : 'background: #2c3e50;');\n\n    return `/**\n * AppBootstrap.js - Generated by app-bootstrap-lib\n * Created: ${new Date().toISOString()}\n */\n\n(function() {\n  'use strict';\n\n  // Asset manifest\n  window.ASSET_MANIFEST = ${JSON.stringify(assetManifest, null, 2)};\n\n  // Loading state\n  window.APP_BOOTSTRAP_LOADING_STATE = {\n    isLoaded: false,\n    isLoading: true,\n    progress: 0,\n    currentChunk: '',\n    loadedChunks: [],\n    totalChunks: ${assetManifest.loadingSequence.js.length},\n    error: null,\n    startTime: Date.now()\n  };\n\n  // Event emitter\n  window.APP_BOOTSTRAP_EVENTS = {\n    listeners: {},\n    on: function(event, callback) {\n      if (!this.listeners[event]) this.listeners[event] = [];\n      this.listeners[event].push(callback);\n    },\n    emit: function(event, data) {\n      if (this.listeners[event]) {\n        this.listeners[event].forEach(cb => cb(data));\n      }\n    }\n  };\n\n  // Loading screen\n  function createLoadingScreen() {\n    const loadingHTML = \\`\n      <div id=\"loading-screen\" style=\"\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        ${themeCSS}\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        color: white;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n        z-index: 9999;\n      \">\n        <div style=\"\n          width: 40px;\n          height: 40px;\n          border: 4px solid rgba(255, 255, 255, 0.3);\n          border-top: 4px solid white;\n          border-radius: 50%;\n          animation: spin 1s linear infinite;\n          margin-bottom: 20px;\n        \"></div>\n        <p id=\"loading-text\">Loading ${appName}...</p>\n        <div id=\"loading-progress\" style=\"\n          width: 200px;\n          height: 4px;\n          background: rgba(255, 255, 255, 0.3);\n          border-radius: 2px;\n          margin-top: 10px;\n          overflow: hidden;\n        \">\n          <div id=\"progress-bar\" style=\"\n            height: 100%;\n            background: white;\n            width: 0%;\n            transition: width 0.3s ease;\n          \"></div>\n        </div>\n        <style>\n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n        </style>\n      </div>\n    \\`;\n\n    document.body.insertAdjacentHTML('afterbegin', loadingHTML);\n  }\n\n  // Load assets\n  async function loadAssets() {\n    const { loadingSequence } = window.ASSET_MANIFEST;\n    const totalChunks = loadingSequence.js.length + loadingSequence.css.length;\n    let loadedChunks = 0;\n\n    // Load CSS first\n    for (const cssFile of loadingSequence.css) {\n      try {\n        await loadCSS(window.ASSET_MANIFEST.css[cssFile]);\n        loadedChunks++;\n        updateProgress(loadedChunks, totalChunks);\n      } catch (error) {\n        console.error('Failed to load CSS:', cssFile, error);\n      }\n    }\n\n    // Load JS\n    for (const jsFile of loadingSequence.js) {\n      try {\n        await loadJS(window.ASSET_MANIFEST.js[jsFile]);\n        loadedChunks++;\n        updateProgress(loadedChunks, totalChunks);\n      } catch (error) {\n        console.error('Failed to load JS:', jsFile, error);\n      }\n    }\n\n    // Complete\n    window.APP_BOOTSTRAP_LOADING_STATE.isLoaded = true;\n    window.APP_BOOTSTRAP_LOADING_STATE.isLoading = false;\n    window.APP_BOOTSTRAP_READY = true;\n\n    window.APP_BOOTSTRAP_EVENTS.emit('loading:complete');\n    hideLoadingScreen();\n  }\n\n  function loadCSS(href: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.href = href;\n      link.onload = () => resolve();\n      link.onerror = () => reject(new Error('CSS load failed: ' + href));\n      document.head.appendChild(link);\n    });\n  }\n\n  function loadJS(src: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.src = src;\n      script.onload = () => resolve();\n      script.onerror = () => reject(new Error('JS load failed: ' + src));\n      document.head.appendChild(script);\n    });\n  }\n\n  function updateProgress(loaded: number, total: number) {\n    const progress = Math.round((loaded / total) * 100);\n    window.APP_BOOTSTRAP_LOADING_STATE.progress = progress;\n\n    const progressBar = document.getElementById('progress-bar');\n    if (progressBar) {\n      progressBar.style.width = progress + '%';\n    }\n\n    window.APP_BOOTSTRAP_EVENTS.emit('loading:progress', { progress });\n  }\n\n  function hideLoadingScreen() {\n    const loadingScreen = document.getElementById('loading-screen');\n    if (loadingScreen) {\n      loadingScreen.style.display = 'none';\n    }\n  }\n\n  // Initialize\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n      createLoadingScreen();\n      loadAssets();\n    });\n  } else {\n    createLoadingScreen();\n    loadAssets();\n  }\n})();\n`;\n}\n","/**\n * Vite Plugin Server-Side Code\n * Created: 2024-07-31\n * Purpose: Isolate Node.js-specific code for the Vite plugin\n */\n\nimport type { AppBootstrapOptions } from './types';\nimport { generateAppBootstrap } from './vite-plugin-utils';\n\nexport function generateDevModeFiles(opts: Required<AppBootstrapOptions>, publicDir: string = 'public'): void {\n    const fs = require('fs');\n    const path = require('path');\n\n    // Create a minimal development asset manifest\n    const devAssetManifest = {\n        js: {\n            'main.js': '/src/main.tsx',\n        },\n        css: {},\n        loadingSequence: {\n            js: ['main.js'],\n            css: []\n        },\n        totalOriginalSize: 0,\n        buildInfo: {\n            timestamp: Date.now(),\n            version: '1.0.0-dev',\n            appName: opts.appName,\n            compressionEnabled: false,\n            chunksGenerated: 1,\n            plugin: 'app-bootstrap-lib-dev'\n        }\n    };\n\n    // Generate development AppBootstrap.js\n    const devAppBootstrapContent = generateAppBootstrap(devAssetManifest, opts);\n\n    // Write files to public directory\n    const fullPublicDir = path.join(process.cwd(), publicDir);\n\n    // Ensure public directory exists\n    if (!fs.existsSync(fullPublicDir)) {\n        fs.mkdirSync(fullPublicDir, { recursive: true });\n    }\n\n    // Write asset-manifest.js\n    const assetManifestPath = path.join(fullPublicDir, 'asset-manifest.js');\n    const assetManifestContent = `window.ASSET_MANIFEST = ${JSON.stringify(devAssetManifest, null, 2)};`;\n    fs.writeFileSync(assetManifestPath, assetManifestContent);\n\n    // Write AppBootstrap.js\n    const appBootstrapPath = path.join(fullPublicDir, opts.bootstrapFileName);\n    fs.writeFileSync(appBootstrapPath, devAppBootstrapContent);\n\n    if (opts.debugMode) {\n        console.log(`[app-bootstrap-lib] 📝 Generated development files:`);\n        console.log(`[app-bootstrap-lib] ✅ ${opts.bootstrapFileName}`);\n        console.log(`[app-bootstrap-lib] ✅ asset-manifest.js`);\n    }\n}\n","/**\n * Simplified Vite Plugin for App Bootstrap\n * Created: 2024-12-19\n * Updated: 2024-07-31\n * Purpose: Vite plugin integration for app bootstrap functionality.\n *          Separated Node.js-specific code to prevent bundling in client builds.\n */\n\nimport type { Plugin } from 'vite';\nimport type { AppBootstrapOptions, AssetManifest } from './types';\nimport { generateAppBootstrap } from './vite-plugin-utils';\n\n// Default chunk priorities\nconst DEFAULT_PRIORITIES = {\n    'vendor': 1,\n    'main': 2,\n    'app': 3,\n    'chunk': 4\n};\n\n/**\n * Generate chunk configuration\n */\nfunction generateChunkConfiguration(customChunks: Record<string, string[]> = {}): Record<string, string[]> {\n    const chunks: Record<string, string[]> = {\n        vendor: ['react', 'react-dom'],\n        ...customChunks\n    };\n\n    return chunks;\n}\n\n/**\n * Analyze build output and create asset manifest\n */\nfunction analyzeBuildOutput(bundle: any, priorities: Record<string, number>, assetPrefix: string = ''): AssetManifest {\n    const js: Record<string, string> = {};\n    const css: Record<string, string> = {};\n    let totalOriginalSize = 0;\n\n    // Process bundle files\n    for (const [fileName, file] of Object.entries(bundle)) {\n        const fileInfo = file as any;\n        const filePath = assetPrefix ? `${assetPrefix}/${fileName}` : `/${fileName}`;\n\n        if (fileName.endsWith('.js')) {\n            js[fileName] = filePath;\n            totalOriginalSize += fileInfo.code?.length || 0;\n        } else if (fileName.endsWith('.css')) {\n            css[fileName] = filePath;\n            totalOriginalSize += fileInfo.source?.length || 0;\n        }\n    }\n\n    // Create loading sequence based on priorities\n    const loadingSequence = {\n        js: Object.keys(js).sort((a, b) => {\n            const priorityA = priorities[a] || 999;\n            const priorityB = priorities[b] || 999;\n            return priorityA - priorityB;\n        }),\n        css: Object.keys(css)\n    };\n\n    return {\n        js,\n        css,\n        loadingSequence,\n        totalOriginalSize,\n        buildInfo: {\n            timestamp: Date.now(),\n            version: '1.0.0',\n            appName: 'App',\n            compressionEnabled: false,\n            chunksGenerated: Object.keys(js).length,\n            plugin: 'app-bootstrap-lib'\n        }\n    };\n}\n\n/**\n * Transform index.html to include bootstrap script\n */\nfunction transformIndexHtml(html: string, options: Required<AppBootstrapOptions>): string {\n    const bootstrapScript = `<script src=\"/${options.bootstrapFileName}\"></script>`;\n\n    // Insert before closing head tag\n    if (html.includes('</head>')) {\n        return html.replace('</head>', `  ${bootstrapScript}\\n</head>`);\n    }\n\n    // Insert at the beginning if no head tag\n    return bootstrapScript + '\\n' + html;\n}\n\n/**\n * Main Vite plugin function\n */\nexport default function appBootstrapPlugin(options: AppBootstrapOptions = {}): Plugin {\n    let buildAssets: AssetManifest;\n\n    // Set defaults\n    const opts: Required<AppBootstrapOptions> = {\n        enableGzip: false,\n        enableProgress: true,\n        enableFallback: true,\n        debugMode: false,\n        appName: 'Application',\n        appIcon: '⚡',\n        loadingTheme: 'gradient',\n        customTheme: '',\n        enableCDNFallback: false,\n        compressionFirst: false,\n        customChunks: {},\n        chunkPriorities: {},\n        assetPrefix: '',\n        bootstrapFileName: 'AppBootstrap.js',\n        gzipLoaderConfig: {\n            debugMode: false,\n            useGzip: false,\n            fallbackToUncompressed: true,\n            timeout: 10000,\n            retries: 3\n        },\n        ...options\n    };\n\n    // Merge priorities\n    const priorities = { ...DEFAULT_PRIORITIES, ...opts.chunkPriorities };\n\n    return {\n        name: 'app-bootstrap-lib',\n\n        async configureServer(server) {\n            // This hook is only called in serve mode, so we can safely import\n            // the server-side code here.\n            console.log('[app-bootstrap-lib] 🚀 Development server starting, generating bootstrap files...');\n            try {\n                const { generateDevModeFiles } = await import('./vite-plugin-server.js');\n                const publicDir = server.config.publicDir || 'public';\n                console.log(`[app-bootstrap-lib] 📁 Public directory: ${publicDir}`);\n                generateDevModeFiles(opts, publicDir);\n            } catch (e) {\n                console.error('[app-bootstrap-lib] Error generating dev mode files:', e);\n            }\n        },\n\n        config(config) {\n            // Configure build options\n            if (!config.build) config.build = {};\n            config.build.cssCodeSplit = true;\n\n            // Configure rollup options\n            if (!config.build.rollupOptions) config.build.rollupOptions = {};\n            if (!config.build.rollupOptions.output) config.build.rollupOptions.output = {};\n\n            // Set predictable asset names\n            const output = config.build.rollupOptions.output as any;\n            output.entryFileNames = '[name].js';\n            output.chunkFileNames = '[name].js';\n            output.assetFileNames = (assetInfo: any) => {\n                if (!assetInfo.name) return '[name].[ext]';\n                const info = assetInfo.name.split('.');\n                const ext = info[info.length - 1];\n                if (/\\.(css)$/.test(assetInfo.name)) {\n                    return `assets/[name].${ext}`;\n                }\n                return '[name].[ext]';\n            };\n\n            // Generate chunks\n            const chunks = generateChunkConfiguration(opts.customChunks);\n            output.manualChunks = chunks;\n\n            if (opts.debugMode) {\n                console.log('[app-bootstrap-lib] App name:', opts.appName);\n                console.log('[app-bootstrap-lib] Theme:', opts.loadingTheme);\n            }\n\n            return config;\n        },\n\n        transformIndexHtml(html) {\n            return transformIndexHtml(html, opts);\n        },\n\n        generateBundle(_options: any, bundle: any) {\n            // Analyze build output\n            buildAssets = analyzeBuildOutput(bundle, priorities, opts.assetPrefix);\n\n            // Generate asset manifest\n            const assetManifest = {\n                ...buildAssets,\n                buildInfo: {\n                    ...buildAssets.buildInfo,\n                    appName: opts.appName,\n                    compressionEnabled: opts.enableGzip,\n                    plugin: 'app-bootstrap-lib'\n                }\n            };\n\n            // Add asset manifest to bundle\n            this.emitFile({\n                type: 'asset',\n                fileName: 'asset-manifest.js',\n                source: `window.ASSET_MANIFEST = ${JSON.stringify(assetManifest, null, 2)};`\n            });\n\n            // Generate AppBootstrap.js\n            const appBootstrapContent = generateAppBootstrap(assetManifest, opts);\n\n            this.emitFile({\n                type: 'asset',\n                fileName: opts.bootstrapFileName,\n                source: appBootstrapContent\n            });\n\n            if (opts.debugMode) {\n                console.log(`[app-bootstrap-lib] ✅ Generated ${opts.bootstrapFileName}`);\n                console.log(`[app-bootstrap-lib] 📦 Assets: ${Object.keys(buildAssets.js).length} JS, ${Object.keys(buildAssets.css).length} CSS`);\n            }\n        }\n    };\n}\n\n// Named exports\nexport { appBootstrapPlugin };\n"]}