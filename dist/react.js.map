{"version":3,"sources":["../src/react.ts"],"names":["AppBootstrapEvents","event","callback","cb","data","appBootstrapEvents","getAssetManifest","isAppBootstrapReady","getCurrentLoadingState","useAppBootstrap","config","loadingState","setLoadingState","useState","assetManifest","setAssetManifest","error","setError","isReady","useRef","useEffect","currentState","currentManifest","prev","unsubscribeStart","_event","unsubscribeProgress","unsubscribeComplete","unsubscribeError","errorMessage","unsubscribeManifestLoaded","pollInterval","manifest","checkDevReady","rootElement","timeout","retry","useCallback","getChunkProgress","chunkName","getOverallProgress","useAppBootstrapStatus","useAppBootstrapWithConfig"],"mappings":"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","file":"react.js","sourcesContent":["/**\n * Simplified React Hooks for App Bootstrap\n * Created: 2024-12-19\n * Purpose: React integration for app bootstrap functionality\n */\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport type { UseAppBootstrapReturn, LoadingState, AssetManifest, AppBootstrapConfig } from './types';\n\n// Simple event emitter for app bootstrap events\nclass AppBootstrapEvents {\n    private listeners: Record<string, Function[]> = {};\n\n    on(event: string, callback: Function): () => void {\n        if (!this.listeners[event]) {\n            this.listeners[event] = [];\n        }\n        this.listeners[event].push(callback);\n\n        return () => {\n            this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);\n        };\n    }\n\n    emit(event: string, data?: any): void {\n        if (this.listeners[event]) {\n            this.listeners[event].forEach(callback => callback(data));\n        }\n    }\n}\n\n// Global event emitter instance\nexport const appBootstrapEvents = new AppBootstrapEvents();\n\n// Utility functions\nfunction getAssetManifest(): AssetManifest | null {\n    return (window as any).ASSET_MANIFEST || null;\n}\n\nfunction isAppBootstrapReady(): boolean {\n    return (window as any).APP_BOOTSTRAP_READY === true;\n}\n\nfunction getCurrentLoadingState(): LoadingState | null {\n    return (window as any).APP_BOOTSTRAP_LOADING_STATE || null;\n}\n\n/**\n * Main hook for app bootstrap integration\n */\nexport function useAppBootstrap(config: AppBootstrapConfig = {}): UseAppBootstrapReturn {\n    const [loadingState, setLoadingState] = useState<LoadingState>({\n        isLoaded: false,\n        isLoading: false,\n        progress: 0,\n        currentChunk: '',\n        loadedChunks: [],\n        totalChunks: 0,\n        error: null,\n        startTime: Date.now()\n    });\n\n    const [assetManifest, setAssetManifest] = useState<AssetManifest | null>(null);\n    const [error, setError] = useState<string | null>(null);\n    const isReady = useRef(false);\n\n    // Initialize loading state\n    useEffect(() => {\n        const currentState = getCurrentLoadingState();\n        const currentManifest = getAssetManifest();\n\n        if (currentState) {\n            setLoadingState(currentState);\n        }\n\n        if (currentManifest) {\n            setAssetManifest(currentManifest);\n        }\n\n        // Check if already ready\n        if (isAppBootstrapReady()) {\n            isReady.current = true;\n            setLoadingState(prev => ({\n                ...prev,\n                isLoaded: true,\n                isLoading: false,\n                progress: 100\n            }));\n        }\n    }, []);\n\n    // Set up event listeners\n    useEffect(() => {\n        const unsubscribeStart = appBootstrapEvents.on('loading:start', (_event: any) => {\n            setLoadingState(prev => ({\n                ...prev,\n                isLoading: true,\n                isLoaded: false,\n                startTime: Date.now(),\n                error: null\n            }));\n            setError(null);\n        });\n\n        const unsubscribeProgress = appBootstrapEvents.on('loading:progress', (event: any) => {\n            setLoadingState(prev => ({\n                ...prev,\n                progress: event.data?.progress || prev.progress\n            }));\n        });\n\n        const unsubscribeComplete = appBootstrapEvents.on('loading:complete', (_event: any) => {\n            isReady.current = true;\n            setLoadingState(prev => ({\n                ...prev,\n                isLoaded: true,\n                isLoading: false,\n                progress: 100,\n                endTime: Date.now(),\n                duration: Date.now() - prev.startTime\n            }));\n        });\n\n        const unsubscribeError = appBootstrapEvents.on('loading:error', (event: any) => {\n            const errorMessage = event.data?.error || 'Unknown loading error';\n            setError(errorMessage);\n            setLoadingState(prev => ({\n                ...prev,\n                isLoading: false,\n                error: errorMessage\n            }));\n        });\n\n        const unsubscribeManifestLoaded = appBootstrapEvents.on('manifest:loaded', (event: any) => {\n            setAssetManifest(event.data?.manifest);\n        });\n\n        // Cleanup function\n        return () => {\n            unsubscribeStart();\n            unsubscribeProgress();\n            unsubscribeComplete();\n            unsubscribeError();\n            unsubscribeManifestLoaded();\n        };\n    }, []);\n\n    // Poll for asset manifest if not available\n    useEffect(() => {\n        if (assetManifest || !config.enableDebug) return;\n\n        const pollInterval = setInterval(() => {\n            const manifest = getAssetManifest();\n            if (manifest) {\n                setAssetManifest(manifest);\n                clearInterval(pollInterval);\n            }\n        }, 100);\n\n        return () => clearInterval(pollInterval);\n    }, [assetManifest, config.enableDebug]);\n\n    // Development mode detection and ready state\n    useEffect(() => {\n        if (isReady.current) return;\n\n        // In development mode, detect when React app is mounted and ready\n        const checkDevReady = () => {\n            // Check if React app is mounted and DOM is ready\n            const rootElement = document.getElementById('root');\n            if (rootElement && rootElement.children.length > 0) {\n                // Check if the app content is actually rendered\n                const appContent = rootElement.querySelector('.app, .home-page, .system-config-page, .video-player-page');\n                if (appContent) {\n                    console.log('[useAppBootstrap] Development mode: App content detected, marking as ready');\n                    isReady.current = true;\n                    setLoadingState(prev => ({\n                        ...prev,\n                        isLoaded: true,\n                        isLoading: false,\n                        progress: 100,\n                        endTime: Date.now(),\n                        duration: Date.now() - prev.startTime\n                    }));\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Try immediately\n        if (checkDevReady()) return;\n\n        // Poll for app content in development mode\n        const pollInterval = setInterval(() => {\n            if (checkDevReady()) {\n                clearInterval(pollInterval);\n            }\n        }, 100);\n\n        // Fallback timeout\n        const timeout = setTimeout(() => {\n            clearInterval(pollInterval);\n            if (!isReady.current) {\n                console.log('[useAppBootstrap] Development mode: Fallback timeout, marking as ready');\n                isReady.current = true;\n                setLoadingState(prev => ({\n                    ...prev,\n                    isLoaded: true,\n                    isLoading: false,\n                    progress: 100,\n                    endTime: Date.now(),\n                    duration: Date.now() - prev.startTime\n                }));\n            }\n        }, 3000); // 3 second timeout\n\n        return () => {\n            clearInterval(pollInterval);\n            clearTimeout(timeout);\n        };\n    }, []);\n\n    // Retry function\n    const retry = useCallback(() => {\n        setError(null);\n        setLoadingState(prev => ({\n            ...prev,\n            error: null,\n            isLoading: true,\n            isLoaded: false,\n            startTime: Date.now()\n        }));\n\n        appBootstrapEvents.emit('loading:retry', { timestamp: Date.now() });\n    }, []);\n\n    // Get chunk progress\n    const getChunkProgress = useCallback((chunkName: string): number => {\n        if (!assetManifest) return 0;\n        const chunk = assetManifest.js[chunkName];\n        return chunk ? 100 : 0;\n    }, [assetManifest]);\n\n    // Get overall progress\n    const getOverallProgress = useCallback((): number => {\n        return loadingState.progress;\n    }, [loadingState.progress]);\n\n    // Debug logging\n    useEffect(() => {\n        if (config.enableDebug) {\n            console.log('[useAppBootstrap] Loading state:', loadingState);\n            console.log('[useAppBootstrap] Asset manifest:', assetManifest);\n            console.log('[useAppBootstrap] Error:', error);\n        }\n    }, [loadingState, assetManifest, error, config.enableDebug]);\n\n    return {\n        loadingState,\n        assetManifest,\n        isReady: isReady.current,\n        error,\n        retry,\n        getChunkProgress,\n        getOverallProgress\n    };\n}\n\n/**\n * Simplified hook for basic app bootstrap status\n */\nexport function useAppBootstrapStatus() {\n    const { loadingState, isReady, error } = useAppBootstrap();\n\n    return {\n        isReady,\n        isLoading: loadingState.isLoading,\n        isLoaded: loadingState.isLoaded,\n        progress: loadingState.progress,\n        error,\n        currentChunk: loadingState.currentChunk\n    };\n}\n\n/**\n * Hook for app bootstrap with custom configuration\n */\nexport function useAppBootstrapWithConfig(config: AppBootstrapConfig) {\n    return useAppBootstrap(config);\n}\n\n// Export event emitter for external use\n// Note: appBootstrapEvents is already exported above\n"]}