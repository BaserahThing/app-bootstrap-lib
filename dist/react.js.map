{"version":3,"sources":["../src/react.ts"],"names":["getAssetManifest","getLoadingState","isAppReady","getSPAHandlerConfig","getPWAConfig","getBuildInfo","getCompressionStatus","manifest","getSystemFiles","isSystemFile","filename","getAssetUrls","getSPAHandlerCompatibility","getCacheConfig","triggerAssetReload","getUnifiedManifest","response","error","onBootstrapEvent","event","callback","onLoadingProgress","onLoadingComplete","onAppReady","useAssetManifest","useLoadingState","useAppReady","useSPAHandlerConfig","usePWAConfig","useAssetReload","useBuildInfo","useCompressionStatus","useSystemFiles","useIsSystemFile","useAssetUrls","useUnifiedManifest","useSPAHandlerCompatibility","useCacheConfig","react_default"],"mappings":"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","file":"react.js","sourcesContent":["/**\n * Runtime-Free Manifest Access System\n * Created: 2024-12-19\n * Purpose: Provides manifest access without React dependencies\n *          Works with any framework or vanilla JavaScript\n */\n\n// Types for the enhanced manifest\ninterface EnhancedAssetManifest {\n    js: Record<string, string>;\n    css: Record<string, string>;\n    loadingSequence: {\n        js: string[];\n        css: string[];\n    };\n    buildInfo: {\n        appName: string;\n        compressionEnabled: boolean;\n        spaHandlerCompatible: boolean;\n        timestamp: number;\n    };\n    spaHandler: {\n        rootPath: string;\n        fallbackFile: string;\n        enableCompression: boolean;\n        enableCaching: boolean;\n        cacheMaxAge: number;\n        systemFiles: string[];\n    };\n    pwa: {\n        enabled: boolean;\n        manifestFile: string;\n        serviceWorkerFile: string;\n        workboxFile: string;\n    };\n}\n\ninterface LoadingState {\n    isLoaded: boolean;\n    isLoading: boolean;\n    progress: number;\n    currentChunk: string;\n    loadedChunks: string[];\n    totalChunks: number;\n    error: string | null;\n    startTime: number;\n}\n\ninterface BootstrapEvents {\n    on: (event: string, callback: (data: any) => void) => void;\n    emit: (event: string, data: any) => void;\n}\n\n// Global types for the bootstrap system\ndeclare global {\n    interface Window {\n        ASSET_MANIFEST: EnhancedAssetManifest;\n        APP_BOOTSTRAP_LOADING_STATE: LoadingState;\n        APP_BOOTSTRAP_EVENTS: BootstrapEvents;\n        APP_BOOTSTRAP_READY: boolean;\n    }\n}\n\n// Runtime-free manifest access functions\nexport function getAssetManifest(): EnhancedAssetManifest | null {\n    return window.ASSET_MANIFEST || null;\n}\n\nexport function getLoadingState(): LoadingState | null {\n    return window.APP_BOOTSTRAP_LOADING_STATE || null;\n}\n\nexport function isAppReady(): boolean {\n    return window.APP_BOOTSTRAP_READY === true;\n}\n\nexport function getSPAHandlerConfig() {\n    const manifest = getAssetManifest();\n    return manifest?.spaHandler || null;\n}\n\nexport function getPWAConfig() {\n    const manifest = getAssetManifest();\n    return manifest?.pwa || null;\n}\n\nexport function getBuildInfo() {\n    const manifest = getAssetManifest();\n    return manifest?.buildInfo || null;\n}\n\nexport function getCompressionStatus() {\n    const manifest = getAssetManifest();\n    return {\n        enabled: manifest?.buildInfo.compressionEnabled || false,\n        spaHandlerEnabled: manifest?.spaHandler.enableCompression || false\n    };\n}\n\nexport function getSystemFiles() {\n    const manifest = getAssetManifest();\n    return manifest?.spaHandler.systemFiles || [];\n}\n\nexport function isSystemFile(filename: string): boolean {\n    const systemFiles = getSystemFiles();\n    return systemFiles.includes(filename);\n}\n\nexport function getAssetUrls() {\n    const manifest = getAssetManifest();\n    return {\n        js: manifest?.js || {},\n        css: manifest?.css || {},\n        loadingSequence: manifest?.loadingSequence || { js: [], css: [] }\n    };\n}\n\nexport function getSPAHandlerCompatibility() {\n    const manifest = getAssetManifest();\n    return {\n        compatible: manifest?.buildInfo.spaHandlerCompatible || false,\n        rootPath: manifest?.spaHandler.rootPath || '/',\n        fallbackFile: manifest?.spaHandler.fallbackFile || 'index.html'\n    };\n}\n\nexport function getCacheConfig() {\n    const manifest = getAssetManifest();\n    return {\n        enabled: manifest?.spaHandler.enableCaching || false,\n        maxAge: manifest?.spaHandler.cacheMaxAge || 86400\n    };\n}\n\nexport function triggerAssetReload() {\n    if (window.APP_BOOTSTRAP_EVENTS) {\n        window.APP_BOOTSTRAP_EVENTS.emit('reload:requested', { timestamp: Date.now() });\n    }\n}\n\nexport async function getUnifiedManifest() {\n    try {\n        const response = await fetch('/unified-manifest.json');\n        if (response.ok) {\n            return await response.json();\n        }\n    } catch (error) {\n        console.warn('Failed to fetch unified manifest:', error);\n    }\n    return null;\n}\n\n// Event listener utilities for framework integration\nexport function onBootstrapEvent(event: string, callback: (data: any) => void) {\n    if (window.APP_BOOTSTRAP_EVENTS) {\n        window.APP_BOOTSTRAP_EVENTS.on(event, callback);\n    }\n}\n\nexport function onLoadingProgress(callback: (data: { progress: number }) => void) {\n    onBootstrapEvent('loading:progress', callback);\n}\n\nexport function onLoadingComplete(callback: () => void) {\n    onBootstrapEvent('loading:complete', callback);\n}\n\nexport function onAppReady(callback: () => void) {\n    if (isAppReady()) {\n        callback();\n    } else {\n        onLoadingComplete(callback);\n    }\n}\n\n// React-like hooks for framework compatibility\n// These are just wrappers around the runtime-free functions\nexport function useAssetManifest(): EnhancedAssetManifest | null {\n    return getAssetManifest();\n}\n\nexport function useLoadingState(): LoadingState | null {\n    return getLoadingState();\n}\n\nexport function useAppReady(): boolean {\n    return isAppReady();\n}\n\nexport function useSPAHandlerConfig() {\n    return getSPAHandlerConfig();\n}\n\nexport function usePWAConfig() {\n    return getPWAConfig();\n}\n\nexport function useAssetReload() {\n    return triggerAssetReload;\n}\n\nexport function useBuildInfo() {\n    return getBuildInfo();\n}\n\nexport function useCompressionStatus() {\n    return getCompressionStatus();\n}\n\nexport function useSystemFiles() {\n    return getSystemFiles();\n}\n\nexport function useIsSystemFile() {\n    return isSystemFile;\n}\n\nexport function useAssetUrls() {\n    return getAssetUrls();\n}\n\nexport function useUnifiedManifest() {\n    // This would need to be implemented with React's useState/useEffect\n    // For now, return a promise-based approach\n    return getUnifiedManifest();\n}\n\nexport function useSPAHandlerCompatibility() {\n    return getSPAHandlerCompatibility();\n}\n\nexport function useCacheConfig() {\n    return getCacheConfig();\n}\n\n// Default export with all functions\nexport default {\n    // Runtime-free functions\n    getAssetManifest,\n    getLoadingState,\n    isAppReady,\n    getSPAHandlerConfig,\n    getPWAConfig,\n    getBuildInfo,\n    getCompressionStatus,\n    getSystemFiles,\n    isSystemFile,\n    getAssetUrls,\n    getSPAHandlerCompatibility,\n    getCacheConfig,\n    triggerAssetReload,\n    getUnifiedManifest,\n\n    // Event utilities\n    onBootstrapEvent,\n    onLoadingProgress,\n    onLoadingComplete,\n    onAppReady,\n\n    // React-like hooks (for compatibility)\n    useAssetManifest,\n    useLoadingState,\n    useAppReady,\n    useSPAHandlerConfig,\n    usePWAConfig,\n    useAssetReload,\n    useBuildInfo,\n    useCompressionStatus,\n    useSystemFiles,\n    useIsSystemFile,\n    useAssetUrls,\n    useUnifiedManifest,\n    useSPAHandlerCompatibility,\n    useCacheConfig\n};\n"]}