{"version":3,"sources":["../src/cache.ts"],"names":["AppCacheManager","config","existingLoadingScreen","theme","loadingHTML","text","loadingText","checkAppReady","rootElement","pollInterval","message","initializeCacheManager","manager","cache_default"],"mappings":"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","file":"cache.mjs","sourcesContent":["/**\n * Simplified Cache Manager\n * Created: 2024-12-19\n * Purpose: Unified cache management for app bootstrap\n */\n\nimport type { CacheManagerConfig, CacheManager } from './types';\n\nexport class AppCacheManager implements CacheManager {\n    private loadingElement: HTMLElement | null;\n    private config: CacheManagerConfig;\n\n    constructor(config: CacheManagerConfig = {}) {\n        this.config = {\n            cacheName: 'app-bootstrap-v1',\n            appVersion: '1.0.0',\n            enableServiceWorker: true,\n            loadingScreen: {\n                theme: 'gradient'\n            },\n            ...config\n        };\n\n        this.loadingElement = null;\n    }\n\n    async init(): Promise<void> {\n        console.log('App Cache Manager initializing...');\n\n        // Check if loading screen already exists to prevent duplicates\n        const existingLoadingScreen = document.getElementById('loading-screen');\n        if (!existingLoadingScreen) {\n            this.setupLoadingScreen();\n        } else {\n            this.loadingElement = existingLoadingScreen;\n        }\n\n        await this.loadApp();\n    }\n\n    private setupLoadingScreen(): void {\n        const theme = this.config.loadingScreen?.theme || 'gradient';\n        const customHTML = this.config.loadingScreen?.customHTML;\n\n        const loadingHTML = customHTML || this.getDefaultLoadingHTML(theme);\n        document.body.insertAdjacentHTML('afterbegin', loadingHTML);\n        this.loadingElement = document.getElementById('loading-screen');\n    }\n\n    private getDefaultLoadingHTML(theme: string): string {\n        const baseStyles = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      color: white;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      z-index: 9999;\n    `;\n\n        const background = theme === 'gradient'\n            ? 'background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);'\n            : 'background: #2c3e50;';\n\n        return `\n      <div id=\"loading-screen\" style=\"${baseStyles} ${background}\">\n        <div style=\"\n          width: 40px;\n          height: 40px;\n          border: 4px solid rgba(255, 255, 255, 0.3);\n          border-top: 4px solid white;\n          border-radius: 50%;\n          animation: spin 1s linear infinite;\n          margin-bottom: 20px;\n        \"></div>\n        <p id=\"loading-text\">Loading Application...</p>\n        <style>\n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n        </style>\n      </div>\n    `;\n    }\n\n    updateLoadingText(text: string): void {\n        const loadingText = document.getElementById('loading-text');\n        if (loadingText) {\n            loadingText.textContent = text;\n        }\n    }\n\n    private async loadApp(): Promise<void> {\n        this.updateLoadingText('Loading application...');\n\n        // Wait for React app to be ready, then hide loading screen\n        const checkAppReady = () => {\n            const rootElement = document.getElementById('root');\n            if (rootElement && rootElement.children.length > 0) {\n                // Check if React app has rendered content\n                const appContent = rootElement.querySelector('.app, .home-page, .system-config-page, .video-player-page');\n                if (appContent) {\n                    console.log('[CacheManager] App content detected, hiding loading screen');\n                    this.hideLoadingScreen();\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Try immediately\n        if (checkAppReady()) return;\n\n        // Poll for app content\n        const pollInterval = setInterval(() => {\n            if (checkAppReady()) {\n                clearInterval(pollInterval);\n            }\n        }, 100);\n\n        // Fallback timeout\n        setTimeout(() => {\n            clearInterval(pollInterval);\n            console.log('[CacheManager] Fallback timeout, hiding loading screen');\n            this.hideLoadingScreen();\n        }, 3000);\n    }\n\n    hideLoadingScreen(): void {\n        if (this.loadingElement) {\n            this.loadingElement.style.opacity = '0';\n            this.loadingElement.style.transition = 'opacity 0.3s ease-out';\n            setTimeout(() => {\n                if (this.loadingElement && this.loadingElement.parentNode) {\n                    this.loadingElement.parentNode.removeChild(this.loadingElement);\n                }\n            }, 300);\n        }\n    }\n\n    showError(message: string): void {\n        if (this.loadingElement) {\n            this.loadingElement.innerHTML = `\n        <div style=\"text-align: center;\">\n          <h3>Error</h3>\n          <p>${message}</p>\n          <button onclick=\"location.reload()\" style=\"\n            background: white;\n            color: #667eea;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 5px;\n            cursor: pointer;\n            margin-top: 10px;\n          \">Retry</button>\n        </div>\n      `;\n        }\n    }\n\n    retry(): void {\n        location.reload();\n    }\n\n    // Service Worker registration - removed to simplify\n}\n\n// Auto-initialize when DOM is ready\nexport function initializeCacheManager(config?: CacheManagerConfig): AppCacheManager {\n    const manager = new AppCacheManager(config);\n\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', () => {\n            manager.init();\n        });\n    } else {\n        manager.init();\n    }\n\n    return manager;\n}\n\n// Default export\nexport default AppCacheManager;\n"]}