{"version":3,"sources":["../src/asset-manifest.ts"],"names":[],"mappings":"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","file":"build-time.mjs","sourcesContent":["/**\n * Asset Manifest Generator\n * Created: 2024-12-19\n * Purpose: Generate asset manifests with file sizes and compression info\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface AssetInfo {\n    original: string;\n    logical: string;\n    gzipped: string | null;\n    size: number;\n    gzipSize: number;\n    compressionRatio: number;\n}\n\nexport interface AssetManifestData {\n    css: Record<string, AssetInfo>;\n    js: Record<string, AssetInfo>;\n    assets: Record<string, AssetInfo>;\n    buildInfo: {\n        timestamp: number;\n        version: string;\n        compressionRatio: number;\n        totalOriginalSize: number;\n        totalCompressedSize: number;\n    };\n}\n\nexport class AssetManifestGenerator {\n    private distDir: string;\n    private outputFile: string;\n    private manifest: AssetManifestData;\n\n    constructor(distDir: string, outputFile: string) {\n        this.distDir = distDir;\n        this.outputFile = outputFile;\n        this.manifest = {\n            css: {},\n            js: {},\n            assets: {},\n            buildInfo: {\n                timestamp: Date.now(),\n                version: \"1.0.0\",\n                compressionRatio: 0,\n                totalOriginalSize: 0,\n                totalCompressedSize: 0\n            }\n        };\n    }\n\n    /**\n     * Generate the complete asset manifest\n     */\n    async generate(): Promise<void> {\n        console.log('üîç Scanning build directory:', this.distDir);\n\n        if (!fs.existsSync(this.distDir)) {\n            throw new Error(`Build directory not found: ${this.distDir}`);\n        }\n\n        // Scan all files in the dist directory\n        await this.scanDirectory(this.distDir);\n\n        // Calculate compression statistics\n        this.calculateCompressionStats();\n\n        // Generate the manifest file\n        this.writeManifest();\n\n        console.log('‚úÖ Asset manifest generated successfully!');\n        this.printStats();\n    }\n\n    /**\n     * Recursively scan directory for assets\n     */\n    private async scanDirectory(dir: string, relativePath: string = ''): Promise<void> {\n        const items = fs.readdirSync(dir);\n\n        for (const item of items) {\n            const fullPath = path.join(dir, item);\n            const relativeFilePath = path.join(relativePath, item).replace(/\\\\/g, '/');\n            const webPath = '/' + relativeFilePath;\n\n            if (fs.statSync(fullPath).isDirectory()) {\n                await this.scanDirectory(fullPath, relativeFilePath);\n            } else {\n                await this.processFile(fullPath, webPath);\n            }\n        }\n    }\n\n    /**\n     * Extract logical name from hashed filename\n     * e.g., \"vendor-l0sNRNKZ.js\" -> \"vendor.js\"\n     */\n    private getLogicalName(fileName: string): string {\n        // Remove hash pattern (e.g., -l0sNRNKZ) from filename\n        const hashPattern = /-[a-zA-Z0-9]{8,}/;\n        return fileName.replace(hashPattern, '');\n    }\n\n    /**\n     * Process individual file\n     */\n    private async processFile(filePath: string, webPath: string): Promise<void> {\n        const ext = path.extname(filePath).toLowerCase();\n        const fileName = path.basename(filePath);\n\n        // Skip .gz files (we'll handle them separately)\n        if (ext === '.gz') {\n            return;\n        }\n\n        const stats = fs.statSync(filePath);\n        const gzipPath = filePath + '.gz';\n        const hasGzip = fs.existsSync(gzipPath);\n\n        let gzipSize = 0;\n        if (hasGzip) {\n            gzipSize = fs.statSync(gzipPath).size;\n        }\n\n        // For hashed files, create logical name mapping\n        let logicalPath = webPath;\n        if ((webPath.includes('/assets/') || webPath.startsWith('/workbox')) && (ext === '.js' || ext === '.css')) {\n            const logicalFileName = this.getLogicalName(fileName);\n            logicalPath = webPath.replace(fileName, logicalFileName);\n        }\n\n        const assetInfo: AssetInfo = {\n            original: webPath,  // The actual hashed filename\n            logical: logicalPath, // The logical name clients will request\n            gzipped: hasGzip ? webPath + '.gz' : null,\n            size: stats.size,\n            gzipSize: gzipSize,\n            compressionRatio: hasGzip ? Number(((stats.size - gzipSize) / stats.size * 100).toFixed(1)) : 0\n        };\n\n        // Categorize the file using logical path as key\n        if (ext === '.css') {\n            this.manifest.css[logicalPath] = assetInfo;\n            console.log(`üìÑ CSS: ${logicalPath} ‚Üí ${webPath} (${this.formatSize(stats.size)} ‚Üí ${this.formatSize(gzipSize)})`);\n        } else if (ext === '.js') {\n            this.manifest.js[logicalPath] = assetInfo;\n            console.log(`üìú JS: ${logicalPath} ‚Üí ${webPath} (${this.formatSize(stats.size)} ‚Üí ${this.formatSize(gzipSize)})`);\n        } else if (this.isAssetFile(ext)) {\n            this.manifest.assets[logicalPath] = assetInfo;\n            console.log(`üñºÔ∏è Asset: ${logicalPath} (${this.formatSize(stats.size)})`);\n        }\n\n        // Add to totals\n        this.manifest.buildInfo.totalOriginalSize += stats.size;\n        this.manifest.buildInfo.totalCompressedSize += gzipSize || stats.size;\n    }\n\n    /**\n     * Check if file is an asset (image, font, etc.)\n     */\n    private isAssetFile(ext: string): boolean {\n        const assetExtensions = [\n            '.png', '.jpg', '.jpeg', '.gif', '.svg', '.webp',\n            '.ico', '.woff', '.woff2', '.ttf', '.eot',\n            '.json', '.webmanifest', '.txt', '.html'\n        ];\n        return assetExtensions.includes(ext);\n    }\n\n    /**\n     * Calculate overall compression statistics\n     */\n    private calculateCompressionStats(): void {\n        const { totalOriginalSize, totalCompressedSize } = this.manifest.buildInfo;\n\n        if (totalOriginalSize > 0) {\n            this.manifest.buildInfo.compressionRatio =\n                Number(((totalOriginalSize - totalCompressedSize) / totalOriginalSize * 100).toFixed(1));\n        }\n    }\n\n    /**\n     * Write the manifest file\n     */\n    private writeManifest(): void {\n        const manifestContent = `/**\n * Asset Manifest - Dynamic Asset Mapping\n * This file is populated during the build process with actual hashed filenames\n * DO NOT EDIT MANUALLY - Generated by app-bootstrap-lib\n * Generated: ${new Date().toISOString()}\n */\n\n// Dynamic asset mappings with actual hashed filenames\nwindow.ASSET_MANIFEST = ${JSON.stringify(this.manifest, null, 4)};\n\n// Helper function to get asset info by logical path\nwindow.getAssetInfo = function(path) {\n  const categories = ['css', 'js', 'assets'];\n\n  for (const category of categories) {\n    if (window.ASSET_MANIFEST[category] && window.ASSET_MANIFEST[category][path]) {\n      return window.ASSET_MANIFEST[category][path];\n    }\n  }\n\n  return null;\n};\n\n// Helper function to get actual file path (handles logical->actual mapping)\nwindow.getActualPath = function(path) {\n  const assetInfo = window.getAssetInfo(path);\n  return assetInfo ? assetInfo.original : path;\n};\n\n// Helper function to get gzipped path\nwindow.getGzippedPath = function(path) {\n  const assetInfo = window.getAssetInfo(path);\n  return assetInfo && assetInfo.gzipped ? assetInfo.gzipped : null;\n};\n\n// Helper function to check if gzip is available\nwindow.hasGzipVersion = function(path) {\n  const assetInfo = window.getAssetInfo(path);\n  return assetInfo && assetInfo.gzipped !== null;\n};\n\nconsole.log('Asset manifest loaded:', window.ASSET_MANIFEST.buildInfo);\n`;\n\n        fs.writeFileSync(this.outputFile, manifestContent, 'utf8');\n        console.log('üíæ Manifest written to:', this.outputFile);\n    }\n\n    /**\n     * Format file size for display\n     */\n    private formatSize(bytes: number): string {\n        if (bytes === 0) return '0 B';\n\n        const k = 1024;\n        const sizes = ['B', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\n    }\n\n    /**\n     * Print compression statistics\n     */\n    private printStats(): void {\n        const { totalOriginalSize, totalCompressedSize, compressionRatio } = this.manifest.buildInfo;\n\n        console.log('\\nüìä Compression Statistics:');\n        console.log(`   Original Size: ${this.formatSize(totalOriginalSize)}`);\n        console.log(`   Compressed Size: ${this.formatSize(totalCompressedSize)}`);\n        console.log(`   Compression Ratio: ${compressionRatio}%`);\n        console.log(`   Space Saved: ${this.formatSize(totalOriginalSize - totalCompressedSize)}`);\n\n        // Count files by type\n        const cssCount = Object.keys(this.manifest.css).length;\n        const jsCount = Object.keys(this.manifest.js).length;\n        const assetCount = Object.keys(this.manifest.assets).length;\n\n        console.log('\\nüìÅ File Counts:');\n        console.log(`   CSS Files: ${cssCount}`);\n        console.log(`   JS Files: ${jsCount}`);\n        console.log(`   Other Assets: ${assetCount}`);\n        console.log(`   Total Files: ${cssCount + jsCount + assetCount}`);\n    }\n\n    /**\n     * Get the generated manifest\n     */\n    getManifest(): AssetManifestData {\n        return this.manifest;\n    }\n}\n\n/**\n * Generate asset manifest from command line\n */\nexport async function generateAssetManifest(distDir: string = './dist', outputFile?: string): Promise<void> {\n    const defaultOutputFile = path.join(distDir, 'asset-manifest.js');\n    const finalOutputFile = outputFile || defaultOutputFile;\n\n    console.log('üöÄ Starting Asset Manifest Generation...');\n    console.log(`   Build Directory: ${distDir}`);\n    console.log(`   Output File: ${finalOutputFile}`);\n\n    const generator = new AssetManifestGenerator(distDir, finalOutputFile);\n    await generator.generate();\n}\n\n// CLI support - only run if this file is executed directly\n// Check if we're in a Node.js environment and this is the main module\nif (typeof process !== 'undefined' && process.argv && process.argv[1] && process.argv[1].includes('asset-manifest')) {\n    const args = process.argv.slice(2);\n    const distDir = args[0] || './dist';\n    const outputFile = args[1];\n\n    generateAssetManifest(distDir, outputFile).catch(error => {\n        console.error('‚ùå Error generating asset manifest:', error);\n        process.exit(1);\n    });\n}\n"]}