{"version":3,"sources":["../src/react.ts"],"names":[],"mappings":"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","file":"react.mjs","sourcesContent":["/**\n * Simplified React Hooks for App Bootstrap\n * Created: 2024-12-19\n * Purpose: React integration for app bootstrap functionality\n */\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport type { UseAppBootstrapReturn, LoadingState, AssetManifest, AppBootstrapConfig } from './types';\n\n// Simple event emitter for app bootstrap events\nclass AppBootstrapEvents {\n    private listeners: Record<string, Function[]> = {};\n\n    on(event: string, callback: Function): () => void {\n        if (!this.listeners[event]) {\n            this.listeners[event] = [];\n        }\n        this.listeners[event].push(callback);\n\n        return () => {\n            this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);\n        };\n    }\n\n    emit(event: string, data?: any): void {\n        if (this.listeners[event]) {\n            this.listeners[event].forEach(callback => callback(data));\n        }\n    }\n}\n\n// Global event emitter instance\nexport const appBootstrapEvents = new AppBootstrapEvents();\n\n// Utility functions\nfunction getAssetManifest(): AssetManifest | null {\n    return (window as any).ASSET_MANIFEST || null;\n}\n\nfunction isAppBootstrapReady(): boolean {\n    return (window as any).APP_BOOTSTRAP_READY === true;\n}\n\nfunction getCurrentLoadingState(): LoadingState | null {\n    return (window as any).APP_BOOTSTRAP_LOADING_STATE || null;\n}\n\n/**\n * Main hook for app bootstrap integration\n */\nexport function useAppBootstrap(config: AppBootstrapConfig = {}): UseAppBootstrapReturn {\n    const [loadingState, setLoadingState] = useState<LoadingState>({\n        isLoaded: false,\n        isLoading: false,\n        progress: 0,\n        currentChunk: '',\n        loadedChunks: [],\n        totalChunks: 0,\n        error: null,\n        startTime: Date.now()\n    });\n\n    const [assetManifest, setAssetManifest] = useState<AssetManifest | null>(null);\n    const [error, setError] = useState<string | null>(null);\n    const isReady = useRef(false);\n\n    // Initialize loading state\n    useEffect(() => {\n        const currentState = getCurrentLoadingState();\n        const currentManifest = getAssetManifest();\n\n        if (currentState) {\n            setLoadingState(currentState);\n        }\n\n        if (currentManifest) {\n            setAssetManifest(currentManifest);\n        }\n\n        // Check if already ready\n        if (isAppBootstrapReady()) {\n            isReady.current = true;\n            setLoadingState(prev => ({\n                ...prev,\n                isLoaded: true,\n                isLoading: false,\n                progress: 100\n            }));\n        }\n    }, []);\n\n    // Set up event listeners\n    useEffect(() => {\n        const unsubscribeStart = appBootstrapEvents.on('loading:start', (_event: any) => {\n            setLoadingState(prev => ({\n                ...prev,\n                isLoading: true,\n                isLoaded: false,\n                startTime: Date.now(),\n                error: null\n            }));\n            setError(null);\n        });\n\n        const unsubscribeProgress = appBootstrapEvents.on('loading:progress', (event: any) => {\n            setLoadingState(prev => ({\n                ...prev,\n                progress: event.data?.progress || prev.progress\n            }));\n        });\n\n        const unsubscribeComplete = appBootstrapEvents.on('loading:complete', (_event: any) => {\n            isReady.current = true;\n            setLoadingState(prev => ({\n                ...prev,\n                isLoaded: true,\n                isLoading: false,\n                progress: 100,\n                endTime: Date.now(),\n                duration: Date.now() - prev.startTime\n            }));\n        });\n\n        const unsubscribeError = appBootstrapEvents.on('loading:error', (event: any) => {\n            const errorMessage = event.data?.error || 'Unknown loading error';\n            setError(errorMessage);\n            setLoadingState(prev => ({\n                ...prev,\n                isLoading: false,\n                error: errorMessage\n            }));\n        });\n\n        const unsubscribeManifestLoaded = appBootstrapEvents.on('manifest:loaded', (event: any) => {\n            setAssetManifest(event.data?.manifest);\n        });\n\n        // Cleanup function\n        return () => {\n            unsubscribeStart();\n            unsubscribeProgress();\n            unsubscribeComplete();\n            unsubscribeError();\n            unsubscribeManifestLoaded();\n        };\n    }, []);\n\n    // Poll for asset manifest if not available\n    useEffect(() => {\n        if (assetManifest || !config.enableDebug) return;\n\n        const pollInterval = setInterval(() => {\n            const manifest = getAssetManifest();\n            if (manifest) {\n                setAssetManifest(manifest);\n                clearInterval(pollInterval);\n            }\n        }, 100);\n\n        return () => clearInterval(pollInterval);\n    }, [assetManifest, config.enableDebug]);\n\n    // Development mode detection and ready state\n    useEffect(() => {\n        if (isReady.current) return;\n\n        // In development mode, detect when React app is mounted and ready\n        const checkDevReady = () => {\n            // Check if React app is mounted and DOM is ready\n            const rootElement = document.getElementById('root');\n            if (rootElement && rootElement.children.length > 0) {\n                // Check if the app content is actually rendered\n                const appContent = rootElement.querySelector('.app, .home-page, .system-config-page, .video-player-page');\n                if (appContent) {\n                    console.log('[useAppBootstrap] Development mode: App content detected, marking as ready');\n                    isReady.current = true;\n                    setLoadingState(prev => ({\n                        ...prev,\n                        isLoaded: true,\n                        isLoading: false,\n                        progress: 100,\n                        endTime: Date.now(),\n                        duration: Date.now() - prev.startTime\n                    }));\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Try immediately\n        if (checkDevReady()) return;\n\n        // Poll for app content in development mode\n        const pollInterval = setInterval(() => {\n            if (checkDevReady()) {\n                clearInterval(pollInterval);\n            }\n        }, 100);\n\n        // Fallback timeout\n        const timeout = setTimeout(() => {\n            clearInterval(pollInterval);\n            if (!isReady.current) {\n                console.log('[useAppBootstrap] Development mode: Fallback timeout, marking as ready');\n                isReady.current = true;\n                setLoadingState(prev => ({\n                    ...prev,\n                    isLoaded: true,\n                    isLoading: false,\n                    progress: 100,\n                    endTime: Date.now(),\n                    duration: Date.now() - prev.startTime\n                }));\n            }\n        }, 3000); // 3 second timeout\n\n        return () => {\n            clearInterval(pollInterval);\n            clearTimeout(timeout);\n        };\n    }, []);\n\n    // Retry function\n    const retry = useCallback(() => {\n        setError(null);\n        setLoadingState(prev => ({\n            ...prev,\n            error: null,\n            isLoading: true,\n            isLoaded: false,\n            startTime: Date.now()\n        }));\n\n        appBootstrapEvents.emit('loading:retry', { timestamp: Date.now() });\n    }, []);\n\n    // Get chunk progress\n    const getChunkProgress = useCallback((chunkName: string): number => {\n        if (!assetManifest) return 0;\n        const chunk = assetManifest.js[chunkName];\n        return chunk ? 100 : 0;\n    }, [assetManifest]);\n\n    // Get overall progress\n    const getOverallProgress = useCallback((): number => {\n        return loadingState.progress;\n    }, [loadingState.progress]);\n\n    // Debug logging\n    useEffect(() => {\n        if (config.enableDebug) {\n            console.log('[useAppBootstrap] Loading state:', loadingState);\n            console.log('[useAppBootstrap] Asset manifest:', assetManifest);\n            console.log('[useAppBootstrap] Error:', error);\n        }\n    }, [loadingState, assetManifest, error, config.enableDebug]);\n\n    return {\n        loadingState,\n        assetManifest,\n        isReady: isReady.current,\n        error,\n        retry,\n        getChunkProgress,\n        getOverallProgress\n    };\n}\n\n/**\n * Simplified hook for basic app bootstrap status\n */\nexport function useAppBootstrapStatus() {\n    const { loadingState, isReady, error } = useAppBootstrap();\n\n    return {\n        isReady,\n        isLoading: loadingState.isLoading,\n        isLoaded: loadingState.isLoaded,\n        progress: loadingState.progress,\n        error,\n        currentChunk: loadingState.currentChunk\n    };\n}\n\n/**\n * Hook for app bootstrap with custom configuration\n */\nexport function useAppBootstrapWithConfig(config: AppBootstrapConfig) {\n    return useAppBootstrap(config);\n}\n\n// Export event emitter for external use\n// Note: appBootstrapEvents is already exported above\n"]}