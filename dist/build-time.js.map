{"version":3,"sources":["../src/asset-manifest.ts"],"names":["AssetManifestGenerator","distDir","outputFile","n","dir","relativePath","items","item","fullPath","l","relativeFilePath","webPath","fileName","hashPattern","filePath","ext","stats","gzipPath","hasGzip","gzipSize","logicalPath","logicalFileName","assetInfo","totalOriginalSize","totalCompressedSize","manifestContent","bytes","k","sizes","i","compressionRatio","cssCount","jsCount","assetCount","generateAssetManifest","defaultOutputFile","finalOutputFile","args","error"],"mappings":"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","file":"build-time.js","sourcesContent":["/**\n * Asset Manifest Generator\n * Created: 2024-12-19\n * Purpose: Generate asset manifests with file sizes and compression info\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface AssetInfo {\n    original: string;\n    logical: string;\n    gzipped: string | null;\n    size: number;\n    gzipSize: number;\n    compressionRatio: number;\n}\n\nexport interface AssetManifestData {\n    css: Record<string, AssetInfo>;\n    js: Record<string, AssetInfo>;\n    assets: Record<string, AssetInfo>;\n    buildInfo: {\n        timestamp: number;\n        version: string;\n        compressionRatio: number;\n        totalOriginalSize: number;\n        totalCompressedSize: number;\n    };\n}\n\nexport class AssetManifestGenerator {\n    private distDir: string;\n    private outputFile: string;\n    private manifest: AssetManifestData;\n\n    constructor(distDir: string, outputFile: string) {\n        this.distDir = distDir;\n        this.outputFile = outputFile;\n        this.manifest = {\n            css: {},\n            js: {},\n            assets: {},\n            buildInfo: {\n                timestamp: Date.now(),\n                version: \"1.0.0\",\n                compressionRatio: 0,\n                totalOriginalSize: 0,\n                totalCompressedSize: 0\n            }\n        };\n    }\n\n    /**\n     * Generate the complete asset manifest\n     */\n    async generate(): Promise<void> {\n        console.log('üîç Scanning build directory:', this.distDir);\n\n        if (!fs.existsSync(this.distDir)) {\n            throw new Error(`Build directory not found: ${this.distDir}`);\n        }\n\n        // Scan all files in the dist directory\n        await this.scanDirectory(this.distDir);\n\n        // Calculate compression statistics\n        this.calculateCompressionStats();\n\n        // Generate the manifest file\n        this.writeManifest();\n\n        console.log('‚úÖ Asset manifest generated successfully!');\n        this.printStats();\n    }\n\n    /**\n     * Recursively scan directory for assets\n     */\n    private async scanDirectory(dir: string, relativePath: string = ''): Promise<void> {\n        const items = fs.readdirSync(dir);\n\n        for (const item of items) {\n            const fullPath = path.join(dir, item);\n            const relativeFilePath = path.join(relativePath, item).replace(/\\\\/g, '/');\n            const webPath = '/' + relativeFilePath;\n\n            if (fs.statSync(fullPath).isDirectory()) {\n                await this.scanDirectory(fullPath, relativeFilePath);\n            } else {\n                await this.processFile(fullPath, webPath);\n            }\n        }\n    }\n\n    /**\n     * Extract logical name from hashed filename\n     * e.g., \"vendor-l0sNRNKZ.js\" -> \"vendor.js\"\n     */\n    private getLogicalName(fileName: string): string {\n        // Remove hash pattern (e.g., -l0sNRNKZ) from filename\n        const hashPattern = /-[a-zA-Z0-9]{8,}/;\n        return fileName.replace(hashPattern, '');\n    }\n\n    /**\n     * Process individual file\n     */\n    private async processFile(filePath: string, webPath: string): Promise<void> {\n        const ext = path.extname(filePath).toLowerCase();\n        const fileName = path.basename(filePath);\n\n        // Skip .gz files (we'll handle them separately)\n        if (ext === '.gz') {\n            return;\n        }\n\n        const stats = fs.statSync(filePath);\n        const gzipPath = filePath + '.gz';\n        const hasGzip = fs.existsSync(gzipPath);\n\n        let gzipSize = 0;\n        if (hasGzip) {\n            gzipSize = fs.statSync(gzipPath).size;\n        }\n\n        // For hashed files, create logical name mapping\n        let logicalPath = webPath;\n        if ((webPath.includes('/assets/') || webPath.startsWith('/workbox')) && (ext === '.js' || ext === '.css')) {\n            const logicalFileName = this.getLogicalName(fileName);\n            logicalPath = webPath.replace(fileName, logicalFileName);\n        }\n\n        const assetInfo: AssetInfo = {\n            original: webPath,  // The actual hashed filename\n            logical: logicalPath, // The logical name clients will request\n            gzipped: hasGzip ? webPath + '.gz' : null,\n            size: stats.size,\n            gzipSize: gzipSize,\n            compressionRatio: hasGzip ? Number(((stats.size - gzipSize) / stats.size * 100).toFixed(1)) : 0\n        };\n\n        // Categorize the file using logical path as key\n        if (ext === '.css') {\n            this.manifest.css[logicalPath] = assetInfo;\n            console.log(`üìÑ CSS: ${logicalPath} ‚Üí ${webPath} (${this.formatSize(stats.size)} ‚Üí ${this.formatSize(gzipSize)})`);\n        } else if (ext === '.js') {\n            this.manifest.js[logicalPath] = assetInfo;\n            console.log(`üìú JS: ${logicalPath} ‚Üí ${webPath} (${this.formatSize(stats.size)} ‚Üí ${this.formatSize(gzipSize)})`);\n        } else if (this.isAssetFile(ext)) {\n            this.manifest.assets[logicalPath] = assetInfo;\n            console.log(`üñºÔ∏è Asset: ${logicalPath} (${this.formatSize(stats.size)})`);\n        }\n\n        // Add to totals\n        this.manifest.buildInfo.totalOriginalSize += stats.size;\n        this.manifest.buildInfo.totalCompressedSize += gzipSize || stats.size;\n    }\n\n    /**\n     * Check if file is an asset (image, font, etc.)\n     */\n    private isAssetFile(ext: string): boolean {\n        const assetExtensions = [\n            '.png', '.jpg', '.jpeg', '.gif', '.svg', '.webp',\n            '.ico', '.woff', '.woff2', '.ttf', '.eot',\n            '.json', '.webmanifest', '.txt', '.html'\n        ];\n        return assetExtensions.includes(ext);\n    }\n\n    /**\n     * Calculate overall compression statistics\n     */\n    private calculateCompressionStats(): void {\n        const { totalOriginalSize, totalCompressedSize } = this.manifest.buildInfo;\n\n        if (totalOriginalSize > 0) {\n            this.manifest.buildInfo.compressionRatio =\n                Number(((totalOriginalSize - totalCompressedSize) / totalOriginalSize * 100).toFixed(1));\n        }\n    }\n\n    /**\n     * Write the manifest file\n     */\n    private writeManifest(): void {\n        const manifestContent = `/**\n * Asset Manifest - Dynamic Asset Mapping\n * This file is populated during the build process with actual hashed filenames\n * DO NOT EDIT MANUALLY - Generated by app-bootstrap-lib\n * Generated: ${new Date().toISOString()}\n */\n\n// Dynamic asset mappings with actual hashed filenames\nwindow.ASSET_MANIFEST = ${JSON.stringify(this.manifest, null, 4)};\n\n// Helper function to get asset info by logical path\nwindow.getAssetInfo = function(path) {\n  const categories = ['css', 'js', 'assets'];\n\n  for (const category of categories) {\n    if (window.ASSET_MANIFEST[category] && window.ASSET_MANIFEST[category][path]) {\n      return window.ASSET_MANIFEST[category][path];\n    }\n  }\n\n  return null;\n};\n\n// Helper function to get actual file path (handles logical->actual mapping)\nwindow.getActualPath = function(path) {\n  const assetInfo = window.getAssetInfo(path);\n  return assetInfo ? assetInfo.original : path;\n};\n\n// Helper function to get gzipped path\nwindow.getGzippedPath = function(path) {\n  const assetInfo = window.getAssetInfo(path);\n  return assetInfo && assetInfo.gzipped ? assetInfo.gzipped : null;\n};\n\n// Helper function to check if gzip is available\nwindow.hasGzipVersion = function(path) {\n  const assetInfo = window.getAssetInfo(path);\n  return assetInfo && assetInfo.gzipped !== null;\n};\n\nconsole.log('Asset manifest loaded:', window.ASSET_MANIFEST.buildInfo);\n`;\n\n        fs.writeFileSync(this.outputFile, manifestContent, 'utf8');\n        console.log('üíæ Manifest written to:', this.outputFile);\n    }\n\n    /**\n     * Format file size for display\n     */\n    private formatSize(bytes: number): string {\n        if (bytes === 0) return '0 B';\n\n        const k = 1024;\n        const sizes = ['B', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\n    }\n\n    /**\n     * Print compression statistics\n     */\n    private printStats(): void {\n        const { totalOriginalSize, totalCompressedSize, compressionRatio } = this.manifest.buildInfo;\n\n        console.log('\\nüìä Compression Statistics:');\n        console.log(`   Original Size: ${this.formatSize(totalOriginalSize)}`);\n        console.log(`   Compressed Size: ${this.formatSize(totalCompressedSize)}`);\n        console.log(`   Compression Ratio: ${compressionRatio}%`);\n        console.log(`   Space Saved: ${this.formatSize(totalOriginalSize - totalCompressedSize)}`);\n\n        // Count files by type\n        const cssCount = Object.keys(this.manifest.css).length;\n        const jsCount = Object.keys(this.manifest.js).length;\n        const assetCount = Object.keys(this.manifest.assets).length;\n\n        console.log('\\nüìÅ File Counts:');\n        console.log(`   CSS Files: ${cssCount}`);\n        console.log(`   JS Files: ${jsCount}`);\n        console.log(`   Other Assets: ${assetCount}`);\n        console.log(`   Total Files: ${cssCount + jsCount + assetCount}`);\n    }\n\n    /**\n     * Get the generated manifest\n     */\n    getManifest(): AssetManifestData {\n        return this.manifest;\n    }\n}\n\n/**\n * Generate asset manifest from command line\n */\nexport async function generateAssetManifest(distDir: string = './dist', outputFile?: string): Promise<void> {\n    const defaultOutputFile = path.join(distDir, 'asset-manifest.js');\n    const finalOutputFile = outputFile || defaultOutputFile;\n\n    console.log('üöÄ Starting Asset Manifest Generation...');\n    console.log(`   Build Directory: ${distDir}`);\n    console.log(`   Output File: ${finalOutputFile}`);\n\n    const generator = new AssetManifestGenerator(distDir, finalOutputFile);\n    await generator.generate();\n}\n\n// CLI support - only run if this file is executed directly\n// Check if we're in a Node.js environment and this is the main module\nif (typeof process !== 'undefined' && process.argv && process.argv[1] && process.argv[1].includes('asset-manifest')) {\n    const args = process.argv.slice(2);\n    const distDir = args[0] || './dist';\n    const outputFile = args[1];\n\n    generateAssetManifest(distDir, outputFile).catch(error => {\n        console.error('‚ùå Error generating asset manifest:', error);\n        process.exit(1);\n    });\n}\n"]}