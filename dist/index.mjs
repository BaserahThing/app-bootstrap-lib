import {useState,useRef,useEffect,useCallback}from'react';function L(n,e){let{appName:t,loadingTheme:o,customTheme:s}=e,r=s||(o==="gradient"?"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);":"background: #2c3e50;");return `/**
 * AppBootstrap.js - Generated by app-bootstrap-lib
 * Created: ${new Date().toISOString()}
 */

(function() {
  'use strict';

  // Asset manifest
  window.ASSET_MANIFEST = ${JSON.stringify(n,null,2)};

  // Loading state
  window.APP_BOOTSTRAP_LOADING_STATE = {
    isLoaded: false,
    isLoading: true,
    progress: 0,
    currentChunk: '',
    loadedChunks: [],
    totalChunks: ${n.loadingSequence.js.length},
    error: null,
    startTime: Date.now()
  };

  // Event emitter
  window.APP_BOOTSTRAP_EVENTS = {
    listeners: {},
    on: function(event, callback) {
      if (!this.listeners[event]) this.listeners[event] = [];
      this.listeners[event].push(callback);
    },
    emit: function(event, data) {
      if (this.listeners[event]) {
        this.listeners[event].forEach(cb => cb(data));
      }
    }
  };

  // Loading screen
  function createLoadingScreen() {
    const loadingHTML = \`
      <div id="loading-screen" style="
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        ${r}
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        color: white;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        z-index: 9999;
      ">
        <div style="
          width: 40px;
          height: 40px;
          border: 4px solid rgba(255, 255, 255, 0.3);
          border-top: 4px solid white;
          border-radius: 50%;
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        "></div>
        <p id="loading-text">Loading ${t}...</p>
        <div id="loading-progress" style="
          width: 200px;
          height: 4px;
          background: rgba(255, 255, 255, 0.3);
          border-radius: 2px;
          margin-top: 10px;
          overflow: hidden;
        ">
          <div id="progress-bar" style="
            height: 100%;
            background: white;
            width: 0%;
            transition: width 0.3s ease;
          "></div>
        </div>
        <style>
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        </style>
      </div>
    \`;

    document.body.insertAdjacentHTML('afterbegin', loadingHTML);
  }

  // Load assets
  async function loadAssets() {
    const { loadingSequence } = window.ASSET_MANIFEST;
    const totalChunks = loadingSequence.js.length + loadingSequence.css.length;
    let loadedChunks = 0;

    // Load CSS first
    for (const cssFile of loadingSequence.css) {
      try {
        await loadCSS(window.ASSET_MANIFEST.css[cssFile]);
        loadedChunks++;
        updateProgress(loadedChunks, totalChunks);
      } catch (error) {
        console.error('Failed to load CSS:', cssFile, error);
      }
    }

    // Load JS
    for (const jsFile of loadingSequence.js) {
      try {
        await loadJS(window.ASSET_MANIFEST.js[jsFile]);
        loadedChunks++;
        updateProgress(loadedChunks, totalChunks);
      } catch (error) {
        console.error('Failed to load JS:', jsFile, error);
      }
    }

    // Complete
    window.APP_BOOTSTRAP_LOADING_STATE.isLoaded = true;
    window.APP_BOOTSTRAP_LOADING_STATE.isLoading = false;
    window.APP_BOOTSTRAP_READY = true;

    window.APP_BOOTSTRAP_EVENTS.emit('loading:complete');
    hideLoadingScreen();
  }

  function loadCSS(href) {
    return new Promise((resolve, reject) => {
      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = href;
      link.onload = () => resolve();
      link.onerror = () => reject(new Error('CSS load failed: ' + href));
      document.head.appendChild(link);
    });
  }

  function loadJS(src) {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = src;
      script.type = 'module'; // Load as ES module
      script.onload = () => resolve();
      script.onerror = () => reject(new Error('JS load failed: ' + src));
      document.head.appendChild(script);
    });
  }

  function updateProgress(loaded, total) {
    const progress = Math.round((loaded / total) * 100);
    window.APP_BOOTSTRAP_LOADING_STATE.progress = progress;

    const progressBar = document.getElementById('progress-bar');
    if (progressBar) {
      progressBar.style.width = progress + '%';
    }

    window.APP_BOOTSTRAP_EVENTS.emit('loading:progress', { progress });
  }

  function hideLoadingScreen() {
    const loadingScreen = document.getElementById('loading-screen');
    if (loadingScreen) {
      loadingScreen.style.display = 'none';
    }
  }

  // Initialize
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      createLoadingScreen();
      loadAssets();
    });
  } else {
    createLoadingScreen();
    loadAssets();
  }
})();
`}var R={enabled:true,cacheNamePrefix:"celebrity-box",strategies:{js:"stale-while-revalidate",css:"stale-while-revalidate",images:"cache-first",html:"network-first",api:"network-first"},expiration:{maxEntries:100,maxAgeSeconds:86400},precache:true,backgroundSync:false};function S(n,e,t={}){let o={...R,...t};if(!o.enabled)return B(n,e);let s=`${o.cacheNamePrefix}-v1`,{appName:r}=e;return `/**
 * Service Worker - Generated by @basirah/app-bootstrap-lib
 * App: ${r}
 * Created: ${new Date().toISOString()}
 */

const CACHE_NAME = '${s}';
const STATIC_CACHE = '${s}-static';
const DYNAMIC_CACHE = '${s}-dynamic';

// Assets to precache
const PRECACHE_ASSETS = [
  '/',
  '/index.html',
  '/AppBootstrap.js',
  '/asset-manifest.js',
${n.loadingSequence.js.map(i=>`  '/${i}',`).join(`
`)}
${n.loadingSequence.css.map(i=>`  '/${i}',`).join(`
`)}
];

// Install event - precache assets
self.addEventListener('install', (event) => {
  console.log('[SW] Installing service worker...');
  event.waitUntil(
    caches.open(STATIC_CACHE)
      .then((cache) => {
        console.log('[SW] Pre-caching app shell');
        return cache.addAll(PRECACHE_ASSETS);
      })
      .then(() => {
        console.log('[SW] Successfully installed');
        return self.skipWaiting();
      })
  );
});

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  console.log('[SW] Activating service worker...');
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) {
              console.log('[SW] Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => {
        console.log('[SW] Successfully activated');
        return self.clients.claim();
      })
  );
});

// Fetch event - handle requests
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);

  // Skip non-GET requests
  if (request.method !== 'GET') {
    return;
  }

  // Handle different file types with different strategies
  if (url.pathname.endsWith('.js')) {
    event.respondWith(handleJSRequest(request));
  } else if (url.pathname.endsWith('.css')) {
    event.respondWith(handleCSSRequest(request));
  } else if (url.pathname.match(/\\.(png|jpg|jpeg|svg|gif|ico)$/)) {
    event.respondWith(handleImageRequest(request));
  } else if (url.pathname.startsWith('/api/')) {
    event.respondWith(handleAPIRequest(request));
  } else {
    event.respondWith(handleHTMLRequest(request));
  }
});

// Cache First strategy for images
async function handleImageRequest(request) {
  try {
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }

    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.error('[SW] Image fetch failed:', error);
    return new Response('Image not available', { status: 404 });
  }
}

// Stale While Revalidate for JS/CSS
async function handleJSRequest(request) {
  return handleStaleWhileRevalidate(request, STATIC_CACHE);
}

async function handleCSSRequest(request) {
  return handleStaleWhileRevalidate(request, STATIC_CACHE);
}

// Network First for HTML
async function handleHTMLRequest(request) {
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.log('[SW] Network failed, trying cache...');
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    return caches.match('/index.html');
  }
}

// Network First for API calls
async function handleAPIRequest(request) {
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.log('[SW] API network failed, trying cache...');
    return await caches.match(request);
  }
}

// Stale While Revalidate strategy
async function handleStaleWhileRevalidate(request, cacheName) {
  const cache = await caches.open(cacheName);
  const cachedResponse = await cache.match(request);

  const fetchPromise = fetch(request).then((networkResponse) => {
    if (networkResponse.ok) {
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  }).catch(() => {
    console.log('[SW] Network failed for:', request.url);
  });

  return cachedResponse || fetchPromise;
}

// Background sync for offline actions
self.addEventListener('sync', (event) => {
  if (event.tag === 'background-sync') {
    console.log('[SW] Background sync triggered');
    event.waitUntil(doBackgroundSync());
  }
});

async function doBackgroundSync() {
  // Handle offline actions here
  console.log('[SW] Processing background sync...');
}

// Push notifications
self.addEventListener('push', (event) => {
  const options = {
    body: event.data ? event.data.text() : 'New notification from ${r}',
    icon: '/icon-192x192.png',
    badge: '/icon-192x192.png',
    vibrate: [100, 50, 100],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: 1
    }
  };

  event.waitUntil(
    self.registration.showNotification('${r}', options)
  );
});

// Notification click
self.addEventListener('notificationclick', (event) => {
  event.notification.close();
  event.waitUntil(
    clients.openWindow('/')
  );
});

console.log('[SW] Service worker loaded successfully');
`}function B(n,e){return `/**
 * Minimal Service Worker - Generated by @basirah/app-bootstrap-lib
 * App: ${e.appName}
 * Created: ${new Date().toISOString()}
 */

self.addEventListener('install', (event) => {
  console.log('[SW] Installing minimal service worker...');
  self.skipWaiting();
});

self.addEventListener('activate', (event) => {
  console.log('[SW] Activating minimal service worker...');
  self.clients.claim();
});

self.addEventListener('fetch', (event) => {
  // Basic caching for offline support
  event.respondWith(
    caches.match(event.request)
      .then((response) => {
        return response || fetch(event.request);
      })
  );
});

console.log('[SW] Minimal service worker loaded');
`}function y(n,e={}){return {...R,...e}.enabled?`/**
 * Service Worker Registration - Generated by @basirah/app-bootstrap-lib
 * App: ${n.appName}
 */

if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/sw.js')
      .then((registration) => {
        console.log('[SW] Registration successful:', registration.scope);

        // Handle updates
        registration.addEventListener('updatefound', () => {
          const newWorker = registration.installing;
          newWorker.addEventListener('statechange', () => {
            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
              // New content is available
              console.log('[SW] New content available');
              // You can show a notification to the user here
            }
          });
        });
      })
      .catch((error) => {
        console.error('[SW] Registration failed:', error);
      });
  });
}

// Background sync registration
if ('serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype) {
  navigator.serviceWorker.ready.then((registration) => {
    // Register background sync
    registration.sync.register('background-sync');
  });
}
`:""}function A(n,e={},t){let o=t?.manifest||{},s={name:o.name||n.appName||"App",short_name:o.short_name||(n.appName||"App").replace(/\s+/g,"").substring(0,12),description:o.description||`PWA for ${n.appName||"App"} with offline support`,theme_color:o.theme_color||(n.loadingTheme==="gradient"?"#667eea":"#2c3e50"),background_color:o.background_color||"#ffffff",display:o.display||"standalone",orientation:o.orientation||"portrait",scope:o.scope||"/",start_url:o.start_url||"/",icons:o.icons||[{src:"/icon-192x192.png",sizes:"192x192",type:"image/png"},{src:"/icon-512x512.png",sizes:"512x512",type:"image/png"},{src:"/icon-512x512.png",sizes:"512x512",type:"image/png",purpose:"maskable"}],categories:["utilities","productivity"],shortcuts:[{name:"Home",short_name:"Home",description:"Go to home page",url:"/",icons:[{src:"/icon-192x192.png",sizes:"192x192"}]}]};return JSON.stringify(s,null,2)}var O={vendor:1,main:2,app:3,chunk:4};function N(n={}){return {vendor:["react","react-dom"],...n}}function _(n,e,t=""){let o={},s={},r=0;for(let[a,p]of Object.entries(n)){let d=p,g=t?`${t}/${a}`:`/${a}`;a.endsWith(".js")?(o[a]=g,r+=d.code?.length||0):a.endsWith(".css")&&(s[a]=g,r+=d.source?.length||0);}let i={js:Object.keys(o).sort((a,p)=>{let d=e[a]||999,g=e[p]||999;return d-g}),css:Object.keys(s)};return {js:o,css:s,loadingSequence:i,totalOriginalSize:r,buildInfo:{timestamp:Date.now(),version:"1.2.0",appName:"PWA App",compressionEnabled:false,chunksGenerated:Object.keys(o).length,plugin:"pwa-bootstrap-kit"}}}function q(n,e,t,o){let s=`<script src="/${e.bootstrapFileName}"><\/script>`,r=t?.enablePWA!==false&&o?.enabled!==false?'<script src="/registerSW.js"><\/script>':"",i=n;if(i=i.replace(/<script type="module" src="\/src\/main\.tsx"><\/script>/g,""),i=i.replace(/<!-- Main Application Entry Point.*?-->/g,""),i=i.replace(/<!-- Development-specific scripts -->[\s\S]*?<\/script>/g,""),i=i.replace(/<!-- Asset Manifest.*?-->\s*<script src="\/asset-manifest\.js"><\/script>/g,""),i.includes("</head>")){let a=[s];r&&a.push(r),i=i.replace("</head>",`  ${a.join(`
  `)}
</head>`);}else {let a=[s];r&&a.push(r),i=a.join(`
`)+`
`+i;}return i}function x(n={}){let e,t={enableGzip:false,debugMode:false,appName:"Application",loadingTheme:"gradient",customTheme:"",customChunks:{},chunkPriorities:{},assetPrefix:"",bootstrapFileName:"AppBootstrap.js",...n},o={...O,...t.chunkPriorities};return {name:"app-bootstrap-lib",config(s){s.build||(s.build={}),s.build.cssCodeSplit=true,s.build.rollupOptions||(s.build.rollupOptions={}),s.build.rollupOptions.output||(s.build.rollupOptions.output={});let r=s.build.rollupOptions.output;r.entryFileNames="[name].js",r.chunkFileNames="[name].js",r.assetFileNames=a=>{if(!a.name)return "[name].[ext]";let p=a.name.split("."),d=p[p.length-1];return /\.(css)$/.test(a.name)?`assets/[name].${d}`:"[name].[ext]"};let i=N(t.customChunks);return r.manualChunks=i,t.debugMode&&(console.log("[app-bootstrap-lib] App name:",t.appName),console.log("[app-bootstrap-lib] Theme:",t.loadingTheme)),s},transformIndexHtml(s){console.log("[app-bootstrap-lib] \u{1F50D} Transforming index.html..."),console.log("[app-bootstrap-lib] \u{1F4C4} HTML length:",s.length),console.log("[app-bootstrap-lib] \u{1F527} Workbox enabled:",n.workbox?.enabled);let r=q(s,t,n.pwa,n.workbox);return console.log("[app-bootstrap-lib] \u2705 HTML transformation complete"),console.log("[app-bootstrap-lib] \u{1F4C4} Result length:",r.length),console.log("[app-bootstrap-lib] \u{1F50D} Contains AppBootstrap.js:",r.includes("AppBootstrap.js")),console.log("[app-bootstrap-lib] \u{1F50D} Contains registerSW.js:",r.includes("registerSW.js")),r},generateBundle(s,r){e=_(r,o,t.assetPrefix);let i={...e,buildInfo:{...e.buildInfo,appName:t.appName,compressionEnabled:t.enableGzip,plugin:"pwa-bootstrap-kit"}};this.emitFile({type:"asset",fileName:"asset-manifest.js",source:`window.ASSET_MANIFEST = ${JSON.stringify(i,null,2)};`});let a=L(i,t);this.emitFile({type:"asset",fileName:t.bootstrapFileName,source:a});let p=n.pwa?.enablePWA!==false,d=n.workbox?.enabled!==false;if(p&&d){let g=n.workbox||{},l=n.pwa||{},c=S(i,t,g);this.emitFile({type:"asset",fileName:"sw.js",source:c});let h=A(t,g,l);this.emitFile({type:"asset",fileName:"manifest.webmanifest",source:h});let u=y(t,g);u&&this.emitFile({type:"asset",fileName:"registerSW.js",source:u}),t.debugMode&&(console.log("[pwa-bootstrap-kit] \u{1F527} Generated Workbox service worker"),console.log("[pwa-bootstrap-kit] \u{1F4F1} Generated PWA manifest"),console.log("[pwa-bootstrap-kit] \u{1F680} PWA functionality enabled"));}else t.debugMode&&(console.log("[pwa-bootstrap-kit] \u26A0\uFE0F PWA functionality disabled"),p||console.log("[pwa-bootstrap-kit]   - PWA config disabled"),d||console.log("[pwa-bootstrap-kit]   - Workbox disabled"));t.debugMode&&(console.log(`[pwa-bootstrap-kit] \u2705 Generated ${t.bootstrapFileName}`),console.log(`[pwa-bootstrap-kit] \u{1F4E6} Assets: ${Object.keys(e.js).length} JS, ${Object.keys(e.css).length} CSS`));}}}var W=class{constructor(){this.listeners={};}on(e,t){return this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t),()=>{this.listeners[e]=this.listeners[e].filter(o=>o!==t);}}emit(e,t){this.listeners[e]&&this.listeners[e].forEach(o=>o(t));}},b=new W;function M(){return window.ASSET_MANIFEST||null}function D(){return window.APP_BOOTSTRAP_READY===true}function F(){return window.APP_BOOTSTRAP_LOADING_STATE||null}function E(n={}){let[e,t]=useState({isLoaded:false,isLoading:false,progress:0,currentChunk:"",loadedChunks:[],totalChunks:0,error:null,startTime:Date.now()}),[o,s]=useState(null),[r,i]=useState(null),a=useRef(false);useEffect(()=>{let l=F(),c=M();l&&t(l),c&&s(c),D()&&(a.current=true,t(h=>({...h,isLoaded:true,isLoading:false,progress:100})));},[]),useEffect(()=>{let l=b.on("loading:start",m=>{t(f=>({...f,isLoading:true,isLoaded:false,startTime:Date.now(),error:null})),i(null);}),c=b.on("loading:progress",m=>{t(f=>({...f,progress:m.data?.progress||f.progress}));}),h=b.on("loading:complete",m=>{a.current=true,t(f=>({...f,isLoaded:true,isLoading:false,progress:100,endTime:Date.now(),duration:Date.now()-f.startTime}));}),u=b.on("loading:error",m=>{let f=m.data?.error||"Unknown loading error";i(f),t(I=>({...I,isLoading:false,error:f}));}),T=b.on("manifest:loaded",m=>{s(m.data?.manifest);});return ()=>{l(),c(),h(),u(),T();}},[]),useEffect(()=>{if(o||!n.enableDebug)return;let l=setInterval(()=>{let c=M();c&&(s(c),clearInterval(l));},100);return ()=>clearInterval(l)},[o,n.enableDebug]),useEffect(()=>{if(a.current)return;let l=()=>{let u=document.getElementById("root");return u&&u.children.length>0&&u.querySelector(".app, .home-page, .system-config-page, .video-player-page")?(console.log("[useAppBootstrap] Development mode: App content detected, marking as ready"),a.current=true,t(m=>({...m,isLoaded:true,isLoading:false,progress:100,endTime:Date.now(),duration:Date.now()-m.startTime})),true):false};if(l())return;let c=setInterval(()=>{l()&&clearInterval(c);},100),h=setTimeout(()=>{clearInterval(c),a.current||(console.log("[useAppBootstrap] Development mode: Fallback timeout, marking as ready"),a.current=true,t(u=>({...u,isLoaded:true,isLoading:false,progress:100,endTime:Date.now(),duration:Date.now()-u.startTime})));},3e3);return ()=>{clearInterval(c),clearTimeout(h);}},[]);let p=useCallback(()=>{i(null),t(l=>({...l,error:null,isLoading:true,isLoaded:false,startTime:Date.now()})),b.emit("loading:retry",{timestamp:Date.now()});},[]),d=useCallback(l=>o&&o.js[l]?100:0,[o]),g=useCallback(()=>e.progress,[e.progress]);return useEffect(()=>{n.enableDebug&&(console.log("[useAppBootstrap] Loading state:",e),console.log("[useAppBootstrap] Asset manifest:",o),console.log("[useAppBootstrap] Error:",r));},[e,o,r,n.enableDebug]),{loadingState:e,assetManifest:o,isReady:a.current,error:r,retry:p,getChunkProgress:d,getOverallProgress:g}}function H(){let{loadingState:n,isReady:e,error:t}=E();return {isReady:e,isLoading:n.isLoading,isLoaded:n.isLoaded,progress:n.progress,error:t,currentChunk:n.currentChunk}}function $(n){return E(n)}var w=class{constructor(e={}){this.config={cacheName:"app-bootstrap-v1",appVersion:"1.0.0",enableServiceWorker:true,loadingScreen:{theme:"gradient"},...e},this.loadingElement=null;}async init(){console.log("App Cache Manager initializing...");let e=document.getElementById("loading-screen");e?this.loadingElement=e:this.setupLoadingScreen(),await this.loadApp();}setupLoadingScreen(){let e=this.config.loadingScreen?.theme||"gradient",o=this.config.loadingScreen?.customHTML||this.getDefaultLoadingHTML(e);document.body.insertAdjacentHTML("afterbegin",o),this.loadingElement=document.getElementById("loading-screen");}getDefaultLoadingHTML(e){return `
      <div id="loading-screen" style="
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      color: white;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      z-index: 9999;
     ${e==="gradient"?"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);":"background: #2c3e50;"}">
        <div style="
          width: 40px;
          height: 40px;
          border: 4px solid rgba(255, 255, 255, 0.3);
          border-top: 4px solid white;
          border-radius: 50%;
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        "></div>
        <p id="loading-text">Loading Application...</p>
        <style>
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        </style>
      </div>
    `}updateLoadingText(e){let t=document.getElementById("loading-text");t&&(t.textContent=e);}async loadApp(){this.updateLoadingText("Loading application...");let e=()=>{let o=document.getElementById("root");return o&&o.children.length>0&&o.querySelector(".app, .home-page, .system-config-page, .video-player-page")?(console.log("[CacheManager] App content detected, hiding loading screen"),this.hideLoadingScreen(),true):false};if(e())return;let t=setInterval(()=>{e()&&clearInterval(t);},100);setTimeout(()=>{clearInterval(t),console.log("[CacheManager] Fallback timeout, hiding loading screen"),this.hideLoadingScreen();},3e3);}hideLoadingScreen(){this.loadingElement&&(this.loadingElement.style.opacity="0",this.loadingElement.style.transition="opacity 0.3s ease-out",setTimeout(()=>{this.loadingElement&&this.loadingElement.parentNode&&this.loadingElement.parentNode.removeChild(this.loadingElement);},300));}showError(e){this.loadingElement&&(this.loadingElement.innerHTML=`
        <div style="text-align: center;">
          <h3>Error</h3>
          <p>${e}</p>
          <button onclick="location.reload()" style="
            background: white;
            color: #667eea;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
          ">Retry</button>
        </div>
      `);}retry(){location.reload();}};function z(n){let e=new w(n);return document.readyState==="loading"?document.addEventListener("DOMContentLoaded",()=>{e.init();}):e.init(),e}var k=class{constructor(e={}){this.deferredPrompt=null;this.installPromptElement=null;this.config={enablePWA:true,manifest:{name:"Progressive Web App",display:"standalone",theme_color:"#000000",background_color:"#ffffff"},serviceWorker:{enabled:true,src:"/sw.js",scope:"/",updateStrategy:"all",skipWaiting:true,clientsClaim:true},installPrompt:{enabled:true,text:"Install this app for a better experience",buttonText:"Install",position:"bottom"},...e};}async init(){if(!this.config.enablePWA){console.log("PWA functionality is disabled");return}try{this.config.serviceWorker?.enabled&&await this.registerServiceWorker(),this.config.installPrompt?.enabled&&this.setupInstallPrompt(),console.log("PWA functionality initialized successfully");}catch(e){console.error("Failed to initialize PWA functionality:",e);}}async registerServiceWorker(){if(!("serviceWorker"in navigator)){console.warn("Service Worker not supported");return}try{let e=await navigator.serviceWorker.register(this.config.serviceWorker.src,{scope:this.config.serviceWorker.scope});console.log("Service Worker registered:",e),e.addEventListener("updatefound",()=>{let t=e.installing;t&&t.addEventListener("statechange",()=>{t.state==="installed"&&navigator.serviceWorker.controller&&this.showUpdatePrompt();});});}catch(e){console.error("Service Worker registration failed:",e);}}setupInstallPrompt(){window.addEventListener("beforeinstallprompt",e=>{e.preventDefault(),this.deferredPrompt=e,this.showInstallPrompt();}),window.addEventListener("appinstalled",()=>{console.log("App was installed"),this.hideInstallPrompt();});}showInstallPrompt(){if(!this.deferredPrompt||!this.config.installPrompt?.enabled)return;this.installPromptElement=document.createElement("div"),this.installPromptElement.className="pwa-install-prompt",this.installPromptElement.innerHTML=`
      <div class="pwa-install-content">
        <p>${this.config.installPrompt.text}</p>
        <button class="pwa-install-button">${this.config.installPrompt.buttonText}</button>
        <button class="pwa-install-dismiss">Dismiss</button>
      </div>
    `,this.installPromptElement.style.cssText=`
      position: fixed;
      ${this.config.installPrompt.position}: 20px;
      left: 20px;
      right: 20px;
      background: white;
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 16px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      z-index: 10000;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    `;let e=this.installPromptElement.querySelector(".pwa-install-button"),t=this.installPromptElement.querySelector(".pwa-install-dismiss");e?.addEventListener("click",()=>this.installApp()),t?.addEventListener("click",()=>this.hideInstallPrompt()),document.body.appendChild(this.installPromptElement);}hideInstallPrompt(){this.installPromptElement&&(this.installPromptElement.remove(),this.installPromptElement=null);}async installApp(){if(!this.deferredPrompt)return;this.deferredPrompt.prompt();let{outcome:e}=await this.deferredPrompt.userChoice;console.log(e==="accepted"?"User accepted the install prompt":"User dismissed the install prompt"),this.deferredPrompt=null,this.hideInstallPrompt();}showUpdatePrompt(){let e=document.createElement("div");e.className="pwa-update-prompt",e.innerHTML=`
      <div class="pwa-update-content">
        <p>A new version is available!</p>
        <button class="pwa-update-button">Update Now</button>
        <button class="pwa-update-dismiss">Later</button>
      </div>
    `,e.style.cssText=`
      position: fixed;
      top: 20px;
      left: 20px;
      right: 20px;
      background: #4CAF50;
      color: white;
      border-radius: 8px;
      padding: 16px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      z-index: 10000;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    `;let t=e.querySelector(".pwa-update-button"),o=e.querySelector(".pwa-update-dismiss");t?.addEventListener("click",()=>{window.location.reload();}),o?.addEventListener("click",()=>{e.remove();}),document.body.appendChild(e);}isInstalled(){return window.matchMedia("(display-mode: standalone)").matches||window.navigator.standalone===true}getStatus(){return {isInstalled:this.isInstalled(),isOnline:navigator.onLine,hasServiceWorker:"serviceWorker"in navigator}}};function U(n){let e=new k(n);return e.init(),e}function G(n){return n.manifest?{name:n.manifest.name,short_name:n.manifest.short_name||n.manifest.name,description:n.manifest.description,theme_color:n.manifest.theme_color,background_color:n.manifest.background_color,display:n.manifest.display,orientation:n.manifest.orientation,scope:n.manifest.scope||"/",start_url:n.manifest.start_url||"/",icons:n.manifest.icons||[]}:null}export{w as AppCacheManager,k as PWAManager,b as appBootstrapEvents,x as appBootstrapPlugin,G as createPWAManifest,A as generatePWAManifest,y as generateServiceWorkerRegistration,S as generateWorkboxServiceWorker,z as initializeCacheManager,U as initializePWA,E as useAppBootstrap,H as useAppBootstrapStatus,$ as useAppBootstrapWithConfig,x as vitePlugin};//# sourceMappingURL=index.mjs.map
//# sourceMappingURL=index.mjs.map