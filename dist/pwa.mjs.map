{"version":3,"sources":["../src/pwa.ts"],"names":["PWAManager","config","error","registration","newWorker","e","installButton","dismissButton","outcome","updatePrompt","updateButton","initializePWA","pwaManager","createPWAManifest","pwa_default"],"mappings":"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","file":"pwa.mjs","sourcesContent":["/**\n * PWA Bootstrap Kit - PWA Module\n * Created: 2024-12-19\n * Purpose: PWA-specific functionality including service worker registration, manifest generation, and install prompts\n *\n * This module can be disabled from project vite config by setting enablePWA: false\n */\n\n// PWA-specific types and functionality\n\n/**\n * PWA Configuration Options\n */\nexport interface PWAConfig {\n    /** Enable PWA functionality (can be disabled from project config) */\n    enablePWA?: boolean;\n    /** PWA manifest configuration */\n    manifest?: {\n        name: string;\n        short_name?: string;\n        description?: string;\n        theme_color?: string;\n        background_color?: string;\n        display?: 'standalone' | 'fullscreen' | 'minimal-ui' | 'browser';\n        orientation?: 'portrait' | 'landscape' | 'any';\n        scope?: string;\n        start_url?: string;\n        icons?: Array<{\n            src: string;\n            sizes: string;\n            type?: string;\n            purpose?: string;\n        }>;\n    };\n    /** Service worker configuration */\n    serviceWorker?: {\n        /** Enable service worker registration */\n        enabled?: boolean;\n        /** Service worker file path */\n        src?: string;\n        /** Service worker scope */\n        scope?: string;\n        /** Update strategy */\n        updateStrategy?: 'all' | 'hierarchical' | 'minimal';\n        /** Skip waiting for service worker updates */\n        skipWaiting?: boolean;\n        /** Clients claim strategy */\n        clientsClaim?: boolean;\n    };\n    /** Install prompt configuration */\n    installPrompt?: {\n        /** Enable install prompt */\n        enabled?: boolean;\n        /** Custom install prompt text */\n        text?: string;\n        /** Install prompt button text */\n        buttonText?: string;\n        /** Install prompt position */\n        position?: 'top' | 'bottom' | 'center';\n    };\n}\n\n/**\n * PWA Manager Class\n * Handles PWA-specific functionality including service worker registration and install prompts\n */\nexport class PWAManager {\n    private config: PWAConfig;\n    private deferredPrompt: any = null;\n    private installPromptElement: HTMLElement | null = null;\n\n    constructor(config: PWAConfig = {}) {\n        this.config = {\n            enablePWA: true,\n            manifest: {\n                name: 'Progressive Web App',\n                display: 'standalone',\n                theme_color: '#000000',\n                background_color: '#ffffff'\n            },\n            serviceWorker: {\n                enabled: true,\n                src: '/sw.js',\n                scope: '/',\n                updateStrategy: 'all',\n                skipWaiting: true,\n                clientsClaim: true\n            },\n            installPrompt: {\n                enabled: true,\n                text: 'Install this app for a better experience',\n                buttonText: 'Install',\n                position: 'bottom'\n            },\n            ...config\n        };\n    }\n\n    /**\n     * Initialize PWA functionality\n     */\n    async init(): Promise<void> {\n        if (!this.config.enablePWA) {\n            console.log('PWA functionality is disabled');\n            return;\n        }\n\n        try {\n            // Register service worker if enabled\n            if (this.config.serviceWorker?.enabled) {\n                await this.registerServiceWorker();\n            }\n\n            // Set up install prompt if enabled\n            if (this.config.installPrompt?.enabled) {\n                this.setupInstallPrompt();\n            }\n\n            console.log('PWA functionality initialized successfully');\n        } catch (error) {\n            console.error('Failed to initialize PWA functionality:', error);\n        }\n    }\n\n    /**\n     * Register service worker\n     */\n    private async registerServiceWorker(): Promise<void> {\n        if (!('serviceWorker' in navigator)) {\n            console.warn('Service Worker not supported');\n            return;\n        }\n\n        try {\n            const registration = await navigator.serviceWorker.register(\n                this.config.serviceWorker!.src!,\n                { scope: this.config.serviceWorker!.scope! }\n            );\n\n            console.log('Service Worker registered:', registration);\n\n            // Handle service worker updates\n            registration.addEventListener('updatefound', () => {\n                const newWorker = registration.installing;\n                if (newWorker) {\n                    newWorker.addEventListener('statechange', () => {\n                        if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                            // New service worker available\n                            this.showUpdatePrompt();\n                        }\n                    });\n                }\n            });\n        } catch (error) {\n            console.error('Service Worker registration failed:', error);\n        }\n    }\n\n    /**\n     * Set up install prompt\n     */\n    private setupInstallPrompt(): void {\n        window.addEventListener('beforeinstallprompt', (e) => {\n            e.preventDefault();\n            this.deferredPrompt = e;\n            this.showInstallPrompt();\n        });\n\n        window.addEventListener('appinstalled', () => {\n            console.log('App was installed');\n            this.hideInstallPrompt();\n        });\n    }\n\n    /**\n     * Show install prompt\n     */\n    private showInstallPrompt(): void {\n        if (!this.deferredPrompt || !this.config.installPrompt?.enabled) {\n            return;\n        }\n\n        // Create install prompt element\n        this.installPromptElement = document.createElement('div');\n        this.installPromptElement.className = 'pwa-install-prompt';\n        this.installPromptElement.innerHTML = `\n      <div class=\"pwa-install-content\">\n        <p>${this.config.installPrompt.text}</p>\n        <button class=\"pwa-install-button\">${this.config.installPrompt.buttonText}</button>\n        <button class=\"pwa-install-dismiss\">Dismiss</button>\n      </div>\n    `;\n\n        // Add styles\n        this.installPromptElement.style.cssText = `\n      position: fixed;\n      ${this.config.installPrompt.position}: 20px;\n      left: 20px;\n      right: 20px;\n      background: white;\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      padding: 16px;\n      box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n      z-index: 10000;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    `;\n\n        // Add event listeners\n        const installButton = this.installPromptElement.querySelector('.pwa-install-button');\n        const dismissButton = this.installPromptElement.querySelector('.pwa-install-dismiss');\n\n        installButton?.addEventListener('click', () => this.installApp());\n        dismissButton?.addEventListener('click', () => this.hideInstallPrompt());\n\n        document.body.appendChild(this.installPromptElement);\n    }\n\n    /**\n     * Hide install prompt\n     */\n    private hideInstallPrompt(): void {\n        if (this.installPromptElement) {\n            this.installPromptElement.remove();\n            this.installPromptElement = null;\n        }\n    }\n\n    /**\n     * Install app\n     */\n    private async installApp(): Promise<void> {\n        if (!this.deferredPrompt) {\n            return;\n        }\n\n        this.deferredPrompt.prompt();\n        const { outcome } = await this.deferredPrompt.userChoice;\n\n        if (outcome === 'accepted') {\n            console.log('User accepted the install prompt');\n        } else {\n            console.log('User dismissed the install prompt');\n        }\n\n        this.deferredPrompt = null;\n        this.hideInstallPrompt();\n    }\n\n    /**\n     * Show update prompt\n     */\n    private showUpdatePrompt(): void {\n        const updatePrompt = document.createElement('div');\n        updatePrompt.className = 'pwa-update-prompt';\n        updatePrompt.innerHTML = `\n      <div class=\"pwa-update-content\">\n        <p>A new version is available!</p>\n        <button class=\"pwa-update-button\">Update Now</button>\n        <button class=\"pwa-update-dismiss\">Later</button>\n      </div>\n    `;\n\n        updatePrompt.style.cssText = `\n      position: fixed;\n      top: 20px;\n      left: 20px;\n      right: 20px;\n      background: #4CAF50;\n      color: white;\n      border-radius: 8px;\n      padding: 16px;\n      box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n      z-index: 10000;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    `;\n\n        const updateButton = updatePrompt.querySelector('.pwa-update-button');\n        const dismissButton = updatePrompt.querySelector('.pwa-update-dismiss');\n\n        updateButton?.addEventListener('click', () => {\n            window.location.reload();\n        });\n\n        dismissButton?.addEventListener('click', () => {\n            updatePrompt.remove();\n        });\n\n        document.body.appendChild(updatePrompt);\n    }\n\n    /**\n     * Check if app is installed\n     */\n    isInstalled(): boolean {\n        return window.matchMedia('(display-mode: standalone)').matches ||\n            (window.navigator as any).standalone === true;\n    }\n\n    /**\n     * Get PWA status\n     */\n    getStatus(): {\n        isInstalled: boolean;\n        isOnline: boolean;\n        hasServiceWorker: boolean;\n    } {\n        return {\n            isInstalled: this.isInstalled(),\n            isOnline: navigator.onLine,\n            hasServiceWorker: 'serviceWorker' in navigator\n        };\n    }\n}\n\n/**\n * Initialize PWA functionality\n * @param config PWA configuration options\n */\nexport function initializePWA(config?: PWAConfig): PWAManager {\n    const pwaManager = new PWAManager(config);\n    pwaManager.init();\n    return pwaManager;\n}\n\n/**\n * Create PWA manifest\n * @param config PWA configuration\n */\nexport function createPWAManifest(config: PWAConfig): any {\n    if (!config.manifest) {\n        return null;\n    }\n\n    return {\n        name: config.manifest.name,\n        short_name: config.manifest.short_name || config.manifest.name,\n        description: config.manifest.description,\n        theme_color: config.manifest.theme_color,\n        background_color: config.manifest.background_color,\n        display: config.manifest.display,\n        orientation: config.manifest.orientation,\n        scope: config.manifest.scope || '/',\n        start_url: config.manifest.start_url || '/',\n        icons: config.manifest.icons || []\n    };\n}\n\n// Default export\nexport default {\n    PWAManager,\n    initializePWA,\n    createPWAManifest\n};\n"]}