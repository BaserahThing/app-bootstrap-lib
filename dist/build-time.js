'use strict';var n=require('fs'),l=require('path');function _interopNamespace(e){if(e&&e.__esModule)return e;var n=Object.create(null);if(e){Object.keys(e).forEach(function(k){if(k!=='default'){var d=Object.getOwnPropertyDescriptor(e,k);Object.defineProperty(n,k,d.get?d:{enumerable:true,get:function(){return e[k]}});}})}n.default=e;return Object.freeze(n)}var n__namespace=/*#__PURE__*/_interopNamespace(n);var l__namespace=/*#__PURE__*/_interopNamespace(l);var p=class{constructor(t,s){this.distDir=t,this.outputFile=s,this.manifest={css:{},js:{},assets:{},buildInfo:{timestamp:Date.now(),version:"1.0.0",compressionRatio:0,totalOriginalSize:0,totalCompressedSize:0}};}async generate(){if(console.log("\u{1F50D} Scanning build directory:",this.distDir),!n__namespace.existsSync(this.distDir))throw new Error(`Build directory not found: ${this.distDir}`);await this.scanDirectory(this.distDir),this.calculateCompressionStats(),this.writeManifest(),console.log("\u2705 Asset manifest generated successfully!"),this.printStats();}async scanDirectory(t,s=""){let e=n__namespace.readdirSync(t);for(let o of e){let i=l__namespace.join(t,o),a=l__namespace.join(s,o).replace(/\\/g,"/"),g="/"+a;n__namespace.statSync(i).isDirectory()?await this.scanDirectory(i,a):await this.processFile(i,g);}}getLogicalName(t){let s=/-[a-zA-Z0-9]{8,}/;return t.replace(s,"")}async processFile(t,s){let e=l__namespace.extname(t).toLowerCase(),o=l__namespace.basename(t);if(e===".gz")return;let i=n__namespace.statSync(t),a=t+".gz",g=n__namespace.existsSync(a),f=0;g&&(f=n__namespace.statSync(a).size);let r=s;if((s.includes("/assets/")||s.startsWith("/workbox"))&&(e===".js"||e===".css")){let h=this.getLogicalName(o);r=s.replace(o,h);}let u={original:s,logical:r,gzipped:g?s+".gz":null,size:i.size,gzipSize:f,compressionRatio:g?Number(((i.size-f)/i.size*100).toFixed(1)):0};e===".css"?(this.manifest.css[r]=u,console.log(`\u{1F4C4} CSS: ${r} \u2192 ${s} (${this.formatSize(i.size)} \u2192 ${this.formatSize(f)})`)):e===".js"?(this.manifest.js[r]=u,console.log(`\u{1F4DC} JS: ${r} \u2192 ${s} (${this.formatSize(i.size)} \u2192 ${this.formatSize(f)})`)):this.isAssetFile(e)&&(this.manifest.assets[r]=u,console.log(`\u{1F5BC}\uFE0F Asset: ${r} (${this.formatSize(i.size)})`)),this.manifest.buildInfo.totalOriginalSize+=i.size,this.manifest.buildInfo.totalCompressedSize+=f||i.size;}isAssetFile(t){return [".png",".jpg",".jpeg",".gif",".svg",".webp",".ico",".woff",".woff2",".ttf",".eot",".json",".webmanifest",".txt",".html"].includes(t)}calculateCompressionStats(){let{totalOriginalSize:t,totalCompressedSize:s}=this.manifest.buildInfo;t>0&&(this.manifest.buildInfo.compressionRatio=Number(((t-s)/t*100).toFixed(1)));}writeManifest(){let t=`/**
 * Asset Manifest - Dynamic Asset Mapping
 * This file is populated during the build process with actual hashed filenames
 * DO NOT EDIT MANUALLY - Generated by app-bootstrap-lib
 * Generated: ${new Date().toISOString()}
 */

// Dynamic asset mappings with actual hashed filenames
window.ASSET_MANIFEST = ${JSON.stringify(this.manifest,null,4)};

// Helper function to get asset info by logical path
window.getAssetInfo = function(path) {
  const categories = ['css', 'js', 'assets'];

  for (const category of categories) {
    if (window.ASSET_MANIFEST[category] && window.ASSET_MANIFEST[category][path]) {
      return window.ASSET_MANIFEST[category][path];
    }
  }

  return null;
};

// Helper function to get actual file path (handles logical->actual mapping)
window.getActualPath = function(path) {
  const assetInfo = window.getAssetInfo(path);
  return assetInfo ? assetInfo.original : path;
};

// Helper function to get gzipped path
window.getGzippedPath = function(path) {
  const assetInfo = window.getAssetInfo(path);
  return assetInfo && assetInfo.gzipped ? assetInfo.gzipped : null;
};

// Helper function to check if gzip is available
window.hasGzipVersion = function(path) {
  const assetInfo = window.getAssetInfo(path);
  return assetInfo && assetInfo.gzipped !== null;
};

console.log('Asset manifest loaded:', window.ASSET_MANIFEST.buildInfo);
`;n__namespace.writeFileSync(this.outputFile,t,"utf8"),console.log("\u{1F4BE} Manifest written to:",this.outputFile);}formatSize(t){if(t===0)return "0 B";let s=1024,e=["B","KB","MB","GB"],o=Math.floor(Math.log(t)/Math.log(s));return parseFloat((t/Math.pow(s,o)).toFixed(1))+" "+e[o]}printStats(){let{totalOriginalSize:t,totalCompressedSize:s,compressionRatio:e}=this.manifest.buildInfo;console.log(`
\u{1F4CA} Compression Statistics:`),console.log(`   Original Size: ${this.formatSize(t)}`),console.log(`   Compressed Size: ${this.formatSize(s)}`),console.log(`   Compression Ratio: ${e}%`),console.log(`   Space Saved: ${this.formatSize(t-s)}`);let o=Object.keys(this.manifest.css).length,i=Object.keys(this.manifest.js).length,a=Object.keys(this.manifest.assets).length;console.log(`
\u{1F4C1} File Counts:`),console.log(`   CSS Files: ${o}`),console.log(`   JS Files: ${i}`),console.log(`   Other Assets: ${a}`),console.log(`   Total Files: ${o+i+a}`);}getManifest(){return this.manifest}};async function m(c="./dist",t){let s=l__namespace.join(c,"asset-manifest.js"),e=t||s;console.log("\u{1F680} Starting Asset Manifest Generation..."),console.log(`   Build Directory: ${c}`),console.log(`   Output File: ${e}`),await new p(c,e).generate();}if(typeof process<"u"&&process.argv&&process.argv[1]&&process.argv[1].includes("asset-manifest")){let c=process.argv.slice(2),t=c[0]||"./dist",s=c[1];m(t,s).catch(e=>{console.error("\u274C Error generating asset manifest:",e),process.exit(1);});}exports.AssetManifestGenerator=p;exports.generateAssetManifest=m;//# sourceMappingURL=build-time.js.map
//# sourceMappingURL=build-time.js.map