{"version":3,"sources":["../src/workbox.ts"],"names":["DEFAULT_WORKBOX_OPTIONS","generateWorkboxServiceWorker","assetManifest","options","workboxOptions","opts","generateMinimalServiceWorker","cacheName","appName","js","css","_assetManifest","generateServiceWorkerRegistration","generatePWAManifest","_workboxOptions","pwaConfig","manifestConfig","manifest"],"mappings":"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","file":"workbox.mjs","sourcesContent":["/**\n * Workbox Integration for App Bootstrap Library\n * Created: 2024-07-31\n * Purpose: Provides PWA functionality with service worker generation and caching strategies\n */\n\nimport type { AppBootstrapOptions, AssetManifest } from './types';\n\nexport interface WorkboxOptions {\n    /** Enable/disable Workbox integration */\n    enabled?: boolean;\n    /** Cache name prefix */\n    cacheNamePrefix?: string;\n    /** Cache strategies for different file types */\n    strategies?: {\n        /** Strategy for JavaScript files */\n        js?: 'cache-first' | 'stale-while-revalidate' | 'network-first';\n        /** Strategy for CSS files */\n        css?: 'cache-first' | 'stale-while-revalidate' | 'network-first';\n        /** Strategy for images */\n        images?: 'cache-first' | 'stale-while-revalidate' | 'network-first';\n        /** Strategy for HTML files */\n        html?: 'cache-first' | 'stale-while-revalidate' | 'network-first';\n        /** Strategy for API calls */\n        api?: 'cache-first' | 'stale-while-revalidate' | 'network-first';\n    };\n    /** Cache expiration settings */\n    expiration?: {\n        /** Maximum number of entries in cache */\n        maxEntries?: number;\n        /** Maximum age in seconds */\n        maxAgeSeconds?: number;\n    };\n    /** Precache assets */\n    precache?: boolean;\n    /** Background sync for offline actions */\n    backgroundSync?: boolean;\n}\n\nconst DEFAULT_WORKBOX_OPTIONS: Required<WorkboxOptions> = {\n    enabled: true,\n    cacheNamePrefix: 'celebrity-box',\n    strategies: {\n        js: 'stale-while-revalidate',\n        css: 'stale-while-revalidate',\n        images: 'cache-first',\n        html: 'network-first',\n        api: 'network-first'\n    },\n    expiration: {\n        maxEntries: 100,\n        maxAgeSeconds: 86400 // 24 hours\n    },\n    precache: true,\n    backgroundSync: false\n};\n\n/**\n * Generate Workbox service worker content\n */\nexport function generateWorkboxServiceWorker(\n    assetManifest: AssetManifest,\n    options: AppBootstrapOptions,\n    workboxOptions: WorkboxOptions = {}\n): string {\n    const opts = { ...DEFAULT_WORKBOX_OPTIONS, ...workboxOptions };\n\n    if (!opts.enabled) {\n        return generateMinimalServiceWorker(assetManifest, options);\n    }\n\n    const cacheName = `${opts.cacheNamePrefix}-v1`;\n    const { appName } = options;\n\n    return `/**\n * Service Worker - Generated by @basirah/app-bootstrap-lib\n * App: ${appName}\n * Created: ${new Date().toISOString()}\n */\n\nconst CACHE_NAME = '${cacheName}';\nconst STATIC_CACHE = '${cacheName}-static';\nconst DYNAMIC_CACHE = '${cacheName}-dynamic';\n\n// Assets to precache\nconst PRECACHE_ASSETS = [\n  '/',\n  '/index.html',\n  '/AppBootstrap.js',\n  '/asset-manifest.js',\n${assetManifest.loadingSequence.js.map(js => `  '/${js}',`).join('\\n')}\n${assetManifest.loadingSequence.css.map(css => `  '/${css}',`).join('\\n')}\n];\n\n// Install event - precache assets\nself.addEventListener('install', (event) => {\n  console.log('[SW] Installing service worker...');\n  event.waitUntil(\n    caches.open(STATIC_CACHE)\n      .then((cache) => {\n        console.log('[SW] Pre-caching app shell');\n        return cache.addAll(PRECACHE_ASSETS);\n      })\n      .then(() => {\n        console.log('[SW] Successfully installed');\n        return self.skipWaiting();\n      })\n  );\n});\n\n// Activate event - clean up old caches\nself.addEventListener('activate', (event) => {\n  console.log('[SW] Activating service worker...');\n  event.waitUntil(\n    caches.keys()\n      .then((cacheNames) => {\n        return Promise.all(\n          cacheNames.map((cacheName) => {\n            if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) {\n              console.log('[SW] Deleting old cache:', cacheName);\n              return caches.delete(cacheName);\n            }\n          })\n        );\n      })\n      .then(() => {\n        console.log('[SW] Successfully activated');\n        return self.clients.claim();\n      })\n  );\n});\n\n// Fetch event - handle requests\nself.addEventListener('fetch', (event) => {\n  const { request } = event;\n  const url = new URL(request.url);\n\n  // Skip non-GET requests\n  if (request.method !== 'GET') {\n    return;\n  }\n\n  // Handle different file types with different strategies\n  if (url.pathname.endsWith('.js')) {\n    event.respondWith(handleJSRequest(request));\n  } else if (url.pathname.endsWith('.css')) {\n    event.respondWith(handleCSSRequest(request));\n  } else if (url.pathname.match(/\\\\.(png|jpg|jpeg|svg|gif|ico)$/)) {\n    event.respondWith(handleImageRequest(request));\n  } else if (url.pathname.startsWith('/api/')) {\n    event.respondWith(handleAPIRequest(request));\n  } else {\n    event.respondWith(handleHTMLRequest(request));\n  }\n});\n\n// Cache First strategy for images\nasync function handleImageRequest(request) {\n  try {\n    const cachedResponse = await caches.match(request);\n    if (cachedResponse) {\n      return cachedResponse;\n    }\n\n    const networkResponse = await fetch(request);\n    if (networkResponse.ok) {\n      const cache = await caches.open(DYNAMIC_CACHE);\n      cache.put(request, networkResponse.clone());\n    }\n    return networkResponse;\n  } catch (error) {\n    console.error('[SW] Image fetch failed:', error);\n    return new Response('Image not available', { status: 404 });\n  }\n}\n\n// Stale While Revalidate for JS/CSS\nasync function handleJSRequest(request) {\n  return handleStaleWhileRevalidate(request, STATIC_CACHE);\n}\n\nasync function handleCSSRequest(request) {\n  return handleStaleWhileRevalidate(request, STATIC_CACHE);\n}\n\n// Network First for HTML\nasync function handleHTMLRequest(request) {\n  try {\n    const networkResponse = await fetch(request);\n    if (networkResponse.ok) {\n      const cache = await caches.open(DYNAMIC_CACHE);\n      cache.put(request, networkResponse.clone());\n    }\n    return networkResponse;\n  } catch (error) {\n    console.log('[SW] Network failed, trying cache...');\n    const cachedResponse = await caches.match(request);\n    if (cachedResponse) {\n      return cachedResponse;\n    }\n    return caches.match('/index.html');\n  }\n}\n\n// Network First for API calls\nasync function handleAPIRequest(request) {\n  try {\n    const networkResponse = await fetch(request);\n    if (networkResponse.ok) {\n      const cache = await caches.open(DYNAMIC_CACHE);\n      cache.put(request, networkResponse.clone());\n    }\n    return networkResponse;\n  } catch (error) {\n    console.log('[SW] API network failed, trying cache...');\n    return await caches.match(request);\n  }\n}\n\n// Stale While Revalidate strategy\nasync function handleStaleWhileRevalidate(request, cacheName) {\n  const cache = await caches.open(cacheName);\n  const cachedResponse = await cache.match(request);\n\n  const fetchPromise = fetch(request).then((networkResponse) => {\n    if (networkResponse.ok) {\n      cache.put(request, networkResponse.clone());\n    }\n    return networkResponse;\n  }).catch(() => {\n    console.log('[SW] Network failed for:', request.url);\n  });\n\n  return cachedResponse || fetchPromise;\n}\n\n// Background sync for offline actions\nself.addEventListener('sync', (event) => {\n  if (event.tag === 'background-sync') {\n    console.log('[SW] Background sync triggered');\n    event.waitUntil(doBackgroundSync());\n  }\n});\n\nasync function doBackgroundSync() {\n  // Handle offline actions here\n  console.log('[SW] Processing background sync...');\n}\n\n// Push notifications\nself.addEventListener('push', (event) => {\n  const options = {\n    body: event.data ? event.data.text() : 'New notification from ${appName}',\n    icon: '/icon-192x192.png',\n    badge: '/icon-192x192.png',\n    vibrate: [100, 50, 100],\n    data: {\n      dateOfArrival: Date.now(),\n      primaryKey: 1\n    }\n  };\n\n  event.waitUntil(\n    self.registration.showNotification('${appName}', options)\n  );\n});\n\n// Notification click\nself.addEventListener('notificationclick', (event) => {\n  event.notification.close();\n  event.waitUntil(\n    clients.openWindow('/')\n  );\n});\n\nconsole.log('[SW] Service worker loaded successfully');\n`;\n}\n\n/**\n * Generate minimal service worker (fallback)\n */\nfunction generateMinimalServiceWorker(\n    _assetManifest: AssetManifest,\n    options: AppBootstrapOptions\n): string {\n    return `/**\n * Minimal Service Worker - Generated by @basirah/app-bootstrap-lib\n * App: ${options.appName}\n * Created: ${new Date().toISOString()}\n */\n\nself.addEventListener('install', (event) => {\n  console.log('[SW] Installing minimal service worker...');\n  self.skipWaiting();\n});\n\nself.addEventListener('activate', (event) => {\n  console.log('[SW] Activating minimal service worker...');\n  self.clients.claim();\n});\n\nself.addEventListener('fetch', (event) => {\n  // Basic caching for offline support\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        return response || fetch(event.request);\n      })\n  );\n});\n\nconsole.log('[SW] Minimal service worker loaded');\n`;\n}\n\n/**\n * Generate service worker registration script\n */\nexport function generateServiceWorkerRegistration(\n    options: AppBootstrapOptions,\n    workboxOptions: WorkboxOptions = {}\n): string {\n    const opts = { ...DEFAULT_WORKBOX_OPTIONS, ...workboxOptions };\n\n    if (!opts.enabled) {\n        return '';\n    }\n\n    return `/**\n * Service Worker Registration - Generated by @basirah/app-bootstrap-lib\n * App: ${options.appName}\n */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/sw.js')\n      .then((registration) => {\n        console.log('[SW] Registration successful:', registration.scope);\n\n        // Handle updates\n        registration.addEventListener('updatefound', () => {\n          const newWorker = registration.installing;\n          newWorker.addEventListener('statechange', () => {\n            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n              // New content is available\n              console.log('[SW] New content available');\n              // You can show a notification to the user here\n            }\n          });\n        });\n      })\n      .catch((error) => {\n        console.error('[SW] Registration failed:', error);\n      });\n  });\n}\n\n// Background sync registration\nif ('serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype) {\n  navigator.serviceWorker.ready.then((registration) => {\n    // Register background sync\n    registration.sync.register('background-sync');\n  });\n}\n`;\n}\n\n/**\n * Generate PWA manifest with Workbox integration\n */\nexport function generatePWAManifest(\n    options: AppBootstrapOptions,\n    _workboxOptions: WorkboxOptions = {},\n    pwaConfig?: any\n): string {\n    // Use PWA config if provided, otherwise use defaults\n    const manifestConfig = pwaConfig?.manifest || {};\n\n    const manifest = {\n        name: manifestConfig.name || options.appName || 'App',\n        short_name: manifestConfig.short_name || (options.appName || 'App').replace(/\\s+/g, '').substring(0, 12),\n        description: manifestConfig.description || `PWA for ${options.appName || 'App'} with offline support`,\n        theme_color: manifestConfig.theme_color || (options.loadingTheme === 'gradient' ? '#667eea' : '#2c3e50'),\n        background_color: manifestConfig.background_color || '#ffffff',\n        display: manifestConfig.display || 'standalone',\n        orientation: manifestConfig.orientation || 'portrait',\n        scope: manifestConfig.scope || '/',\n        start_url: manifestConfig.start_url || '/',\n        icons: manifestConfig.icons || [\n            {\n                src: '/icon-192x192.png',\n                sizes: '192x192',\n                type: 'image/png'\n            },\n            {\n                src: '/icon-512x512.png',\n                sizes: '512x512',\n                type: 'image/png'\n            },\n            {\n                src: '/icon-512x512.png',\n                sizes: '512x512',\n                type: 'image/png',\n                purpose: 'maskable'\n            }\n        ],\n        categories: ['utilities', 'productivity'],\n        shortcuts: [\n            {\n                name: 'Home',\n                short_name: 'Home',\n                description: 'Go to home page',\n                url: '/',\n                icons: [{ src: '/icon-192x192.png', sizes: '192x192' }]\n            }\n        ]\n    };\n\n    return JSON.stringify(manifest, null, 2);\n}\n"]}