var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/vite-plugin-utils.ts
function generateAppBootstrap(assetManifest, options) {
  const { appName, loadingTheme, customTheme } = options;
  const themeCSS = customTheme || (loadingTheme === "gradient" ? "background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);" : "background: #2c3e50;");
  return `/**
 * AppBootstrap.js - Generated by app-bootstrap-lib
 * Created: ${(/* @__PURE__ */ new Date()).toISOString()}
 */

(function() {
  'use strict';

  // Asset manifest
  window.ASSET_MANIFEST = ${JSON.stringify(assetManifest, null, 2)};

  // Loading state
  window.APP_BOOTSTRAP_LOADING_STATE = {
    isLoaded: false,
    isLoading: true,
    progress: 0,
    currentChunk: '',
    loadedChunks: [],
    totalChunks: ${assetManifest.loadingSequence.js.length},
    error: null,
    startTime: Date.now()
  };

  // Event emitter
  window.APP_BOOTSTRAP_EVENTS = {
    listeners: {},
    on: function(event, callback) {
      if (!this.listeners[event]) this.listeners[event] = [];
      this.listeners[event].push(callback);
    },
    emit: function(event, data) {
      if (this.listeners[event]) {
        this.listeners[event].forEach(cb => cb(data));
      }
    }
  };

  // Loading screen
  function createLoadingScreen() {
    const loadingHTML = \`
      <div id="loading-screen" style="
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        ${themeCSS}
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        color: white;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        z-index: 9999;
      ">
        <div style="
          width: 40px;
          height: 40px;
          border: 4px solid rgba(255, 255, 255, 0.3);
          border-top: 4px solid white;
          border-radius: 50%;
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        "></div>
        <p id="loading-text">Loading ${appName}...</p>
        <div id="loading-progress" style="
          width: 200px;
          height: 4px;
          background: rgba(255, 255, 255, 0.3);
          border-radius: 2px;
          margin-top: 10px;
          overflow: hidden;
        ">
          <div id="progress-bar" style="
            height: 100%;
            background: white;
            width: 0%;
            transition: width 0.3s ease;
          "></div>
        </div>
        <style>
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        </style>
      </div>
    \`;

    document.body.insertAdjacentHTML('afterbegin', loadingHTML);
  }

  // Load assets
  async function loadAssets() {
    const { loadingSequence } = window.ASSET_MANIFEST;
    const totalChunks = loadingSequence.js.length + loadingSequence.css.length;
    let loadedChunks = 0;

    // Load CSS first
    for (const cssFile of loadingSequence.css) {
      try {
        await loadCSS(window.ASSET_MANIFEST.css[cssFile]);
        loadedChunks++;
        updateProgress(loadedChunks, totalChunks);
      } catch (error) {
        console.error('Failed to load CSS:', cssFile, error);
      }
    }

    // Load JS
    for (const jsFile of loadingSequence.js) {
      try {
        await loadJS(window.ASSET_MANIFEST.js[jsFile]);
        loadedChunks++;
        updateProgress(loadedChunks, totalChunks);
      } catch (error) {
        console.error('Failed to load JS:', jsFile, error);
      }
    }

    // Complete
    window.APP_BOOTSTRAP_LOADING_STATE.isLoaded = true;
    window.APP_BOOTSTRAP_LOADING_STATE.isLoading = false;
    window.APP_BOOTSTRAP_READY = true;

    window.APP_BOOTSTRAP_EVENTS.emit('loading:complete');
    hideLoadingScreen();
  }

  function loadCSS(href: string): Promise<void> {
    return new Promise((resolve, reject) => {
      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = href;
      link.onload = () => resolve();
      link.onerror = () => reject(new Error('CSS load failed: ' + href));
      document.head.appendChild(link);
    });
  }

  function loadJS(src: string): Promise<void> {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = src;
      script.onload = () => resolve();
      script.onerror = () => reject(new Error('JS load failed: ' + src));
      document.head.appendChild(script);
    });
  }

  function updateProgress(loaded: number, total: number) {
    const progress = Math.round((loaded / total) * 100);
    window.APP_BOOTSTRAP_LOADING_STATE.progress = progress;

    const progressBar = document.getElementById('progress-bar');
    if (progressBar) {
      progressBar.style.width = progress + '%';
    }

    window.APP_BOOTSTRAP_EVENTS.emit('loading:progress', { progress });
  }

  function hideLoadingScreen() {
    const loadingScreen = document.getElementById('loading-screen');
    if (loadingScreen) {
      loadingScreen.style.display = 'none';
    }
  }

  // Initialize
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      createLoadingScreen();
      loadAssets();
    });
  } else {
    createLoadingScreen();
    loadAssets();
  }
})();
`;
}
var init_vite_plugin_utils = __esm({
  "src/vite-plugin-utils.ts"() {
  }
});

// src/vite-plugin-server.ts
var vite_plugin_server_exports = {};
__export(vite_plugin_server_exports, {
  generateDevModeFiles: () => generateDevModeFiles
});
function generateDevModeFiles(opts, publicDir = "public") {
  const fs = __require("fs");
  const path = __require("path");
  const devAssetManifest = {
    js: {
      "main.js": "/src/main.tsx"
    },
    css: {},
    loadingSequence: {
      js: ["main.js"],
      css: []
    },
    totalOriginalSize: 0,
    buildInfo: {
      timestamp: Date.now(),
      version: "1.0.0-dev",
      appName: opts.appName,
      compressionEnabled: false,
      chunksGenerated: 1,
      plugin: "app-bootstrap-lib-dev"
    }
  };
  const devAppBootstrapContent = generateAppBootstrap(devAssetManifest, opts);
  const fullPublicDir = path.join(process.cwd(), publicDir);
  if (!fs.existsSync(fullPublicDir)) {
    fs.mkdirSync(fullPublicDir, { recursive: true });
  }
  const assetManifestPath = path.join(fullPublicDir, "asset-manifest.js");
  const assetManifestContent = `window.ASSET_MANIFEST = ${JSON.stringify(devAssetManifest, null, 2)};`;
  fs.writeFileSync(assetManifestPath, assetManifestContent);
  const appBootstrapPath = path.join(fullPublicDir, opts.bootstrapFileName);
  fs.writeFileSync(appBootstrapPath, devAppBootstrapContent);
  if (opts.debugMode) {
    console.log(`[app-bootstrap-lib] \u{1F4DD} Generated development files:`);
    console.log(`[app-bootstrap-lib] \u2705 ${opts.bootstrapFileName}`);
    console.log(`[app-bootstrap-lib] \u2705 asset-manifest.js`);
  }
}
var init_vite_plugin_server = __esm({
  "src/vite-plugin-server.ts"() {
    init_vite_plugin_utils();
  }
});

// src/vite.ts
init_vite_plugin_utils();
var DEFAULT_PRIORITIES = {
  "vendor": 1,
  "main": 2,
  "app": 3,
  "chunk": 4
};
function generateChunkConfiguration(customChunks = {}) {
  const chunks = {
    vendor: ["react", "react-dom"],
    ...customChunks
  };
  return chunks;
}
function analyzeBuildOutput(bundle, priorities, assetPrefix = "") {
  const js = {};
  const css = {};
  let totalOriginalSize = 0;
  for (const [fileName, file] of Object.entries(bundle)) {
    const fileInfo = file;
    const filePath = assetPrefix ? `${assetPrefix}/${fileName}` : `/${fileName}`;
    if (fileName.endsWith(".js")) {
      js[fileName] = filePath;
      totalOriginalSize += fileInfo.code?.length || 0;
    } else if (fileName.endsWith(".css")) {
      css[fileName] = filePath;
      totalOriginalSize += fileInfo.source?.length || 0;
    }
  }
  const loadingSequence = {
    js: Object.keys(js).sort((a, b) => {
      const priorityA = priorities[a] || 999;
      const priorityB = priorities[b] || 999;
      return priorityA - priorityB;
    }),
    css: Object.keys(css)
  };
  return {
    js,
    css,
    loadingSequence,
    totalOriginalSize,
    buildInfo: {
      timestamp: Date.now(),
      version: "1.0.0",
      appName: "App",
      compressionEnabled: false,
      chunksGenerated: Object.keys(js).length,
      plugin: "app-bootstrap-lib"
    }
  };
}
function transformIndexHtml(html, options) {
  const bootstrapScript = `<script src="/${options.bootstrapFileName}"></script>`;
  if (html.includes("</head>")) {
    return html.replace("</head>", `  ${bootstrapScript}
</head>`);
  }
  return bootstrapScript + "\n" + html;
}
function appBootstrapPlugin(options = {}) {
  let buildAssets;
  const opts = {
    enableGzip: false,
    enableProgress: true,
    enableFallback: true,
    debugMode: false,
    appName: "Application",
    appIcon: "\u26A1",
    loadingTheme: "gradient",
    customTheme: "",
    enableCDNFallback: false,
    compressionFirst: false,
    customChunks: {},
    chunkPriorities: {},
    assetPrefix: "",
    bootstrapFileName: "AppBootstrap.js",
    gzipLoaderConfig: {
      debugMode: false,
      useGzip: false,
      fallbackToUncompressed: true,
      timeout: 1e4,
      retries: 3
    },
    ...options
  };
  const priorities = { ...DEFAULT_PRIORITIES, ...opts.chunkPriorities };
  return {
    name: "app-bootstrap-lib",
    async configureServer(server) {
      console.log("[app-bootstrap-lib] \u{1F680} Development server starting, generating bootstrap files...");
      try {
        const { generateDevModeFiles: generateDevModeFiles2 } = await Promise.resolve().then(() => (init_vite_plugin_server(), vite_plugin_server_exports));
        const publicDir = server.config.publicDir || "public";
        console.log(`[app-bootstrap-lib] \u{1F4C1} Public directory: ${publicDir}`);
        generateDevModeFiles2(opts, publicDir);
      } catch (e) {
        console.error("[app-bootstrap-lib] Error generating dev mode files:", e);
      }
    },
    config(config) {
      if (!config.build) config.build = {};
      config.build.cssCodeSplit = true;
      if (!config.build.rollupOptions) config.build.rollupOptions = {};
      if (!config.build.rollupOptions.output) config.build.rollupOptions.output = {};
      const output = config.build.rollupOptions.output;
      output.entryFileNames = "[name].js";
      output.chunkFileNames = "[name].js";
      output.assetFileNames = (assetInfo) => {
        if (!assetInfo.name) return "[name].[ext]";
        const info = assetInfo.name.split(".");
        const ext = info[info.length - 1];
        if (/\.(css)$/.test(assetInfo.name)) {
          return `assets/[name].${ext}`;
        }
        return "[name].[ext]";
      };
      const chunks = generateChunkConfiguration(opts.customChunks);
      output.manualChunks = chunks;
      if (opts.debugMode) {
        console.log("[app-bootstrap-lib] App name:", opts.appName);
        console.log("[app-bootstrap-lib] Theme:", opts.loadingTheme);
      }
      return config;
    },
    transformIndexHtml(html) {
      return transformIndexHtml(html, opts);
    },
    generateBundle(_options, bundle) {
      buildAssets = analyzeBuildOutput(bundle, priorities, opts.assetPrefix);
      const assetManifest = {
        ...buildAssets,
        buildInfo: {
          ...buildAssets.buildInfo,
          appName: opts.appName,
          compressionEnabled: opts.enableGzip,
          plugin: "app-bootstrap-lib"
        }
      };
      this.emitFile({
        type: "asset",
        fileName: "asset-manifest.js",
        source: `window.ASSET_MANIFEST = ${JSON.stringify(assetManifest, null, 2)};`
      });
      const appBootstrapContent = generateAppBootstrap(assetManifest, opts);
      this.emitFile({
        type: "asset",
        fileName: opts.bootstrapFileName,
        source: appBootstrapContent
      });
      if (opts.debugMode) {
        console.log(`[app-bootstrap-lib] \u2705 Generated ${opts.bootstrapFileName}`);
        console.log(`[app-bootstrap-lib] \u{1F4E6} Assets: ${Object.keys(buildAssets.js).length} JS, ${Object.keys(buildAssets.css).length} CSS`);
      }
    }
  };
}

export { appBootstrapPlugin, appBootstrapPlugin as default };
//# sourceMappingURL=vite.mjs.map
//# sourceMappingURL=vite.mjs.map