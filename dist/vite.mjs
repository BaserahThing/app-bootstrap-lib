function u(t,a){let{appName:e,loadingTheme:r,customTheme:n}=a,s=n||(r==="gradient"?"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);":"background: #2c3e50;");return `/**
 * AppBootstrap.js - Generated by app-bootstrap-lib
 * Created: ${new Date().toISOString()}
 */

(function() {
  'use strict';

  // Asset manifest
  window.ASSET_MANIFEST = ${JSON.stringify(t,null,2)};

  // Loading state
  window.APP_BOOTSTRAP_LOADING_STATE = {
    isLoaded: false,
    isLoading: true,
    progress: 0,
    currentChunk: '',
    loadedChunks: [],
    totalChunks: ${t.loadingSequence.js.length},
    error: null,
    startTime: Date.now()
  };

  // Event emitter
  window.APP_BOOTSTRAP_EVENTS = {
    listeners: {},
    on: function(event, callback) {
      if (!this.listeners[event]) this.listeners[event] = [];
      this.listeners[event].push(callback);
    },
    emit: function(event, data) {
      if (this.listeners[event]) {
        this.listeners[event].forEach(cb => cb(data));
      }
    }
  };

  // Loading screen
  function createLoadingScreen() {
    const loadingHTML = \`
      <div id="loading-screen" style="
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        ${s}
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        color: white;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        z-index: 9999;
      ">
        <div style="
          width: 40px;
          height: 40px;
          border: 4px solid rgba(255, 255, 255, 0.3);
          border-top: 4px solid white;
          border-radius: 50%;
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        "></div>
        <p id="loading-text">Loading ${e}...</p>
        <div id="loading-progress" style="
          width: 200px;
          height: 4px;
          background: rgba(255, 255, 255, 0.3);
          border-radius: 2px;
          margin-top: 10px;
          overflow: hidden;
        ">
          <div id="progress-bar" style="
            height: 100%;
            background: white;
            width: 0%;
            transition: width 0.3s ease;
          "></div>
        </div>
        <style>
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        </style>
      </div>
    \`;

    document.body.insertAdjacentHTML('afterbegin', loadingHTML);
  }

  // Load assets
  async function loadAssets() {
    const { loadingSequence } = window.ASSET_MANIFEST;
    const totalChunks = loadingSequence.js.length + loadingSequence.css.length;
    let loadedChunks = 0;

    // Load CSS first
    for (const cssFile of loadingSequence.css) {
      try {
        await loadCSS(window.ASSET_MANIFEST.css[cssFile]);
        loadedChunks++;
        updateProgress(loadedChunks, totalChunks);
      } catch (error) {
        console.error('Failed to load CSS:', cssFile, error);
      }
    }

    // Load JS
    for (const jsFile of loadingSequence.js) {
      try {
        await loadJS(window.ASSET_MANIFEST.js[jsFile]);
        loadedChunks++;
        updateProgress(loadedChunks, totalChunks);
      } catch (error) {
        console.error('Failed to load JS:', jsFile, error);
      }
    }

    // Complete
    window.APP_BOOTSTRAP_LOADING_STATE.isLoaded = true;
    window.APP_BOOTSTRAP_LOADING_STATE.isLoading = false;
    window.APP_BOOTSTRAP_READY = true;

    window.APP_BOOTSTRAP_EVENTS.emit('loading:complete');
    hideLoadingScreen();
  }

  function loadCSS(href) {
    return new Promise((resolve, reject) => {
      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = href;
      link.onload = () => resolve();
      link.onerror = () => reject(new Error('CSS load failed: ' + href));
      document.head.appendChild(link);
    });
  }

  function loadJS(src) {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = src;
      script.type = 'module'; // Load as ES module
      script.onload = () => resolve();
      script.onerror = () => reject(new Error('JS load failed: ' + src));
      document.head.appendChild(script);
    });
  }

  function updateProgress(loaded, total) {
    const progress = Math.round((loaded / total) * 100);
    window.APP_BOOTSTRAP_LOADING_STATE.progress = progress;

    const progressBar = document.getElementById('progress-bar');
    if (progressBar) {
      progressBar.style.width = progress + '%';
    }

    window.APP_BOOTSTRAP_EVENTS.emit('loading:progress', { progress });
  }

  function hideLoadingScreen() {
    const loadingScreen = document.getElementById('loading-screen');
    if (loadingScreen) {
      loadingScreen.style.display = 'none';
    }
  }

  // Initialize
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      createLoadingScreen();
      loadAssets();
    });
  } else {
    createLoadingScreen();
    loadAssets();
  }
})();
`}var g={enabled:true,cacheNamePrefix:"celebrity-box",strategies:{js:"stale-while-revalidate",css:"stale-while-revalidate",images:"cache-first",html:"network-first",api:"network-first"},expiration:{maxEntries:100,maxAgeSeconds:86400},precache:true,backgroundSync:false};function h(t,a,e={}){let r={...g,...e};if(!r.enabled)return w(t,a);let n=`${r.cacheNamePrefix}-v1`,{appName:s}=a;return `/**
 * Service Worker - Generated by @basirah/app-bootstrap-lib
 * App: ${s}
 * Created: ${new Date().toISOString()}
 */

const CACHE_NAME = '${n}';
const STATIC_CACHE = '${n}-static';
const DYNAMIC_CACHE = '${n}-dynamic';

// Assets to precache
const PRECACHE_ASSETS = [
  '/',
  '/index.html',
  '/AppBootstrap.js',
  '/asset-manifest.js',
${t.loadingSequence.js.map(o=>`  '/${o}',`).join(`
`)}
${t.loadingSequence.css.map(o=>`  '/${o}',`).join(`
`)}
];

// Install event - precache assets
self.addEventListener('install', (event) => {
  console.log('[SW] Installing service worker...');
  event.waitUntil(
    caches.open(STATIC_CACHE)
      .then((cache) => {
        console.log('[SW] Pre-caching app shell');
        return cache.addAll(PRECACHE_ASSETS);
      })
      .then(() => {
        console.log('[SW] Successfully installed');
        return self.skipWaiting();
      })
  );
});

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  console.log('[SW] Activating service worker...');
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) {
              console.log('[SW] Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => {
        console.log('[SW] Successfully activated');
        return self.clients.claim();
      })
  );
});

// Fetch event - handle requests
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);

  // Skip non-GET requests
  if (request.method !== 'GET') {
    return;
  }

  // Handle different file types with different strategies
  if (url.pathname.endsWith('.js')) {
    event.respondWith(handleJSRequest(request));
  } else if (url.pathname.endsWith('.css')) {
    event.respondWith(handleCSSRequest(request));
  } else if (url.pathname.match(/\\.(png|jpg|jpeg|svg|gif|ico)$/)) {
    event.respondWith(handleImageRequest(request));
  } else if (url.pathname.startsWith('/api/')) {
    event.respondWith(handleAPIRequest(request));
  } else {
    event.respondWith(handleHTMLRequest(request));
  }
});

// Cache First strategy for images
async function handleImageRequest(request) {
  try {
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }

    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.error('[SW] Image fetch failed:', error);
    return new Response('Image not available', { status: 404 });
  }
}

// Stale While Revalidate for JS/CSS
async function handleJSRequest(request) {
  return handleStaleWhileRevalidate(request, STATIC_CACHE);
}

async function handleCSSRequest(request) {
  return handleStaleWhileRevalidate(request, STATIC_CACHE);
}

// Network First for HTML
async function handleHTMLRequest(request) {
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.log('[SW] Network failed, trying cache...');
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    return caches.match('/index.html');
  }
}

// Network First for API calls
async function handleAPIRequest(request) {
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.log('[SW] API network failed, trying cache...');
    return await caches.match(request);
  }
}

// Stale While Revalidate strategy
async function handleStaleWhileRevalidate(request, cacheName) {
  const cache = await caches.open(cacheName);
  const cachedResponse = await cache.match(request);

  const fetchPromise = fetch(request).then((networkResponse) => {
    if (networkResponse.ok) {
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  }).catch(() => {
    console.log('[SW] Network failed for:', request.url);
  });

  return cachedResponse || fetchPromise;
}

// Background sync for offline actions
self.addEventListener('sync', (event) => {
  if (event.tag === 'background-sync') {
    console.log('[SW] Background sync triggered');
    event.waitUntil(doBackgroundSync());
  }
});

async function doBackgroundSync() {
  // Handle offline actions here
  console.log('[SW] Processing background sync...');
}

// Push notifications
self.addEventListener('push', (event) => {
  const options = {
    body: event.data ? event.data.text() : 'New notification from ${s}',
    icon: '/icon-192x192.png',
    badge: '/icon-192x192.png',
    vibrate: [100, 50, 100],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: 1
    }
  };

  event.waitUntil(
    self.registration.showNotification('${s}', options)
  );
});

// Notification click
self.addEventListener('notificationclick', (event) => {
  event.notification.close();
  event.waitUntil(
    clients.openWindow('/')
  );
});

console.log('[SW] Service worker loaded successfully');
`}function w(t,a){return `/**
 * Minimal Service Worker - Generated by @basirah/app-bootstrap-lib
 * App: ${a.appName}
 * Created: ${new Date().toISOString()}
 */

self.addEventListener('install', (event) => {
  console.log('[SW] Installing minimal service worker...');
  self.skipWaiting();
});

self.addEventListener('activate', (event) => {
  console.log('[SW] Activating minimal service worker...');
  self.clients.claim();
});

self.addEventListener('fetch', (event) => {
  // Basic caching for offline support
  event.respondWith(
    caches.match(event.request)
      .then((response) => {
        return response || fetch(event.request);
      })
  );
});

console.log('[SW] Minimal service worker loaded');
`}function f(t,a={}){return {...g,...a}.enabled?`/**
 * Service Worker Registration - Generated by @basirah/app-bootstrap-lib
 * App: ${t.appName}
 */

if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/sw.js')
      .then((registration) => {
        console.log('[SW] Registration successful:', registration.scope);

        // Handle updates
        registration.addEventListener('updatefound', () => {
          const newWorker = registration.installing;
          newWorker.addEventListener('statechange', () => {
            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
              // New content is available
              console.log('[SW] New content available');
              // You can show a notification to the user here
            }
          });
        });
      })
      .catch((error) => {
        console.error('[SW] Registration failed:', error);
      });
  });
}

// Background sync registration
if ('serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype) {
  navigator.serviceWorker.ready.then((registration) => {
    // Register background sync
    registration.sync.register('background-sync');
  });
}
`:""}function m(t,a={},e){let r=e?.manifest||{},n={name:r.name||t.appName||"App",short_name:r.short_name||(t.appName||"App").replace(/\s+/g,"").substring(0,12),description:r.description||`PWA for ${t.appName||"App"} with offline support`,theme_color:r.theme_color||(t.loadingTheme==="gradient"?"#667eea":"#2c3e50"),background_color:r.background_color||"#ffffff",display:r.display||"standalone",orientation:r.orientation||"portrait",scope:r.scope||"/",start_url:r.start_url||"/",icons:r.icons||[{src:"/icon-192x192.png",sizes:"192x192",type:"image/png"},{src:"/icon-512x512.png",sizes:"512x512",type:"image/png"},{src:"/icon-512x512.png",sizes:"512x512",type:"image/png",purpose:"maskable"}],categories:["utilities","productivity"],shortcuts:[{name:"Home",short_name:"Home",description:"Go to home page",url:"/",icons:[{src:"/icon-192x192.png",sizes:"192x192"}]}]};return JSON.stringify(n,null,2)}var A={vendor:1,main:2,app:3,chunk:4};function v(t={}){return {vendor:["react","react-dom"],...t}}function y(t,a,e=""){let r={},n={},s=0;for(let[i,c]of Object.entries(t)){let l=c,p=e?`${e}/${i}`:`/${i}`;i.endsWith(".js")?(r[i]=p,s+=l.code?.length||0):i.endsWith(".css")&&(n[i]=p,s+=l.source?.length||0);}let o={js:Object.keys(r).sort((i,c)=>{let l=a[i]||999,p=a[c]||999;return l-p}),css:Object.keys(n)};return {js:r,css:n,loadingSequence:o,totalOriginalSize:s,buildInfo:{timestamp:Date.now(),version:"1.2.0",appName:"PWA App",compressionEnabled:false,chunksGenerated:Object.keys(r).length,plugin:"pwa-bootstrap-kit"}}}function W(t,a,e,r){let n=`<script src="/${a.bootstrapFileName}"><\/script>`,s=e?.enablePWA!==false&&r?.enabled!==false?'<script src="/registerSW.js"><\/script>':"",o=t;if(o=o.replace(/<script type="module" src="\/src\/main\.tsx"><\/script>/g,""),o=o.replace(/<!-- Main Application Entry Point.*?-->/g,""),o=o.replace(/<!-- Development-specific scripts -->[\s\S]*?<\/script>/g,""),o=o.replace(/<!-- Asset Manifest.*?-->\s*<script src="\/asset-manifest\.js"><\/script>/g,""),o.includes("</head>")){let i=[n];s&&i.push(s),o=o.replace("</head>",`  ${i.join(`
  `)}
</head>`);}else {let i=[n];s&&i.push(s),o=i.join(`
`)+`
`+o;}return o}function C(t={}){let a,e={enableGzip:false,debugMode:false,appName:"Application",loadingTheme:"gradient",customTheme:"",customChunks:{},chunkPriorities:{},assetPrefix:"",bootstrapFileName:"AppBootstrap.js",...t},r={...A,...e.chunkPriorities};return {name:"app-bootstrap-lib",config(n){n.build||(n.build={}),n.build.cssCodeSplit=true,n.build.rollupOptions||(n.build.rollupOptions={}),n.build.rollupOptions.output||(n.build.rollupOptions.output={});let s=n.build.rollupOptions.output;s.entryFileNames="[name].js",s.chunkFileNames="[name].js",s.assetFileNames=i=>{if(!i.name)return "[name].[ext]";let c=i.name.split("."),l=c[c.length-1];return /\.(css)$/.test(i.name)?`assets/[name].${l}`:"[name].[ext]"};let o=v(e.customChunks);return s.manualChunks=o,e.debugMode&&(console.log("[app-bootstrap-lib] App name:",e.appName),console.log("[app-bootstrap-lib] Theme:",e.loadingTheme)),n},transformIndexHtml(n){console.log("[app-bootstrap-lib] \u{1F50D} Transforming index.html..."),console.log("[app-bootstrap-lib] \u{1F4C4} HTML length:",n.length),console.log("[app-bootstrap-lib] \u{1F527} Workbox enabled:",t.workbox?.enabled);let s=W(n,e,t.pwa,t.workbox);return console.log("[app-bootstrap-lib] \u2705 HTML transformation complete"),console.log("[app-bootstrap-lib] \u{1F4C4} Result length:",s.length),console.log("[app-bootstrap-lib] \u{1F50D} Contains AppBootstrap.js:",s.includes("AppBootstrap.js")),console.log("[app-bootstrap-lib] \u{1F50D} Contains registerSW.js:",s.includes("registerSW.js")),s},generateBundle(n,s){a=y(s,r,e.assetPrefix);let o={...a,buildInfo:{...a.buildInfo,appName:e.appName,compressionEnabled:e.enableGzip,plugin:"pwa-bootstrap-kit"}};this.emitFile({type:"asset",fileName:"asset-manifest.js",source:`window.ASSET_MANIFEST = ${JSON.stringify(o,null,2)};`});let i=u(o,e);this.emitFile({type:"asset",fileName:e.bootstrapFileName,source:i});let c=t.pwa?.enablePWA!==false,l=t.workbox?.enabled!==false;if(c&&l){let p=t.workbox||{},b=t.pwa||{},S=h(o,e,p);this.emitFile({type:"asset",fileName:"sw.js",source:S});let k=m(e,p,b);this.emitFile({type:"asset",fileName:"manifest.webmanifest",source:k});let d=f(e,p);d&&this.emitFile({type:"asset",fileName:"registerSW.js",source:d}),e.debugMode&&(console.log("[pwa-bootstrap-kit] \u{1F527} Generated Workbox service worker"),console.log("[pwa-bootstrap-kit] \u{1F4F1} Generated PWA manifest"),console.log("[pwa-bootstrap-kit] \u{1F680} PWA functionality enabled"));}else e.debugMode&&(console.log("[pwa-bootstrap-kit] \u26A0\uFE0F PWA functionality disabled"),c||console.log("[pwa-bootstrap-kit]   - PWA config disabled"),l||console.log("[pwa-bootstrap-kit]   - Workbox disabled"));e.debugMode&&(console.log(`[pwa-bootstrap-kit] \u2705 Generated ${e.bootstrapFileName}`),console.log(`[pwa-bootstrap-kit] \u{1F4E6} Assets: ${Object.keys(a.js).length} JS, ${Object.keys(a.css).length} CSS`));}}}export{C as appBootstrapPlugin,C as default};//# sourceMappingURL=vite.mjs.map
//# sourceMappingURL=vite.mjs.map