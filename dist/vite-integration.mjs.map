{"version":3,"sources":["../src/vite-plugin-utils.ts","../src/vite-integration.ts"],"names":["generateAppBootstrap","assetManifest","options","appName","loadingTheme","customTheme","themeCSS","enhancedPWABootstrapPlugin","createBootstrapPlugin","buildAssets","opts","config","output","assetInfo","info","ext","html","result","_options","bundle","analyzeBuildOutput","bootstrapScript","enhancedManifest","generateEnhancedManifest","enhancedOptions","unifiedManifest","generateUnifiedManifest","entries","file","assetPrefix","js","css","totalOriginalSize","fileName","fileInfo","filePath","vite_integration_default"],"mappings":"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","file":"vite-integration.mjs","sourcesContent":["/**\n * Vite Plugin Utilities\n * Created: 2024-07-31\n * Purpose: Shared utility functions for the Vite plugin\n */\n\nimport type { AppBootstrapOptions, AssetManifest } from './types';\n\nexport function generateAppBootstrap(assetManifest: AssetManifest, options: Required<AppBootstrapOptions>): string {\n    const { appName, loadingTheme, customTheme } = options;\n\n    const themeCSS = customTheme || (loadingTheme === 'gradient'\n        ? 'background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);'\n        : 'background: #2c3e50;');\n\n    return `/**\n * AppBootstrap.js - Generated by app-bootstrap-lib\n * Created: ${new Date().toISOString()}\n */\n\n(function() {\n  'use strict';\n\n  // Asset manifest\n  window.ASSET_MANIFEST = ${JSON.stringify(assetManifest, null, 2)};\n\n  // Loading state\n  window.APP_BOOTSTRAP_LOADING_STATE = {\n    isLoaded: false,\n    isLoading: true,\n    progress: 0,\n    currentChunk: '',\n    loadedChunks: [],\n    totalChunks: ${assetManifest.loadingSequence.js.length},\n    error: null,\n    startTime: Date.now()\n  };\n\n  // Event emitter\n  window.APP_BOOTSTRAP_EVENTS = {\n    listeners: {},\n    on: function(event, callback) {\n      if (!this.listeners[event]) this.listeners[event] = [];\n      this.listeners[event].push(callback);\n    },\n    emit: function(event, data) {\n      if (this.listeners[event]) {\n        this.listeners[event].forEach(cb => cb(data));\n      }\n    }\n  };\n\n  // Loading screen\n  function createLoadingScreen() {\n    const loadingHTML = \\`\n      <div id=\"loading-screen\" style=\"\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        ${themeCSS}\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        color: white;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n        z-index: 9999;\n      \">\n        <div style=\"\n          width: 40px;\n          height: 40px;\n          border: 4px solid rgba(255, 255, 255, 0.3);\n          border-top: 4px solid white;\n          border-radius: 50%;\n          animation: spin 1s linear infinite;\n          margin-bottom: 20px;\n        \"></div>\n        <p id=\"loading-text\">Loading ${appName}...</p>\n        <div id=\"loading-progress\" style=\"\n          width: 200px;\n          height: 4px;\n          background: rgba(255, 255, 255, 0.3);\n          border-radius: 2px;\n          margin-top: 10px;\n          overflow: hidden;\n        \">\n          <div id=\"progress-bar\" style=\"\n            height: 100%;\n            background: white;\n            width: 0%;\n            transition: width 0.3s ease;\n          \"></div>\n        </div>\n        <style>\n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n        </style>\n      </div>\n    \\`;\n\n    document.body.insertAdjacentHTML('afterbegin', loadingHTML);\n  }\n\n  // Load assets\n  async function loadAssets() {\n    const { loadingSequence } = window.ASSET_MANIFEST;\n    const totalChunks = loadingSequence.js.length + loadingSequence.css.length;\n    let loadedChunks = 0;\n\n    // Load CSS first\n    for (const cssFile of loadingSequence.css) {\n      try {\n        await loadCSS(window.ASSET_MANIFEST.css[cssFile]);\n        loadedChunks++;\n        updateProgress(loadedChunks, totalChunks);\n      } catch (error) {\n        console.error('Failed to load CSS:', cssFile, error);\n      }\n    }\n\n    // Load JS\n    for (const jsFile of loadingSequence.js) {\n      try {\n        await loadJS(window.ASSET_MANIFEST.js[jsFile]);\n        loadedChunks++;\n        updateProgress(loadedChunks, totalChunks);\n      } catch (error) {\n        console.error('Failed to load JS:', jsFile, error);\n      }\n    }\n\n    // Complete\n    window.APP_BOOTSTRAP_LOADING_STATE.isLoaded = true;\n    window.APP_BOOTSTRAP_LOADING_STATE.isLoading = false;\n    window.APP_BOOTSTRAP_READY = true;\n\n    window.APP_BOOTSTRAP_EVENTS.emit('loading:complete');\n    hideLoadingScreen();\n  }\n\n  function loadCSS(href) {\n    return new Promise((resolve, reject) => {\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.href = href;\n      link.onload = () => resolve();\n      link.onerror = () => reject(new Error('CSS load failed: ' + href));\n      document.head.appendChild(link);\n    });\n  }\n\n  function loadJS(src) {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.src = src;\n      script.type = 'module'; // Load as ES module\n      script.onload = () => resolve();\n      script.onerror = () => reject(new Error('JS load failed: ' + src));\n      document.head.appendChild(script);\n    });\n  }\n\n  function updateProgress(loaded, total) {\n    const progress = Math.round((loaded / total) * 100);\n    window.APP_BOOTSTRAP_LOADING_STATE.progress = progress;\n\n    const progressBar = document.getElementById('progress-bar');\n    if (progressBar) {\n      progressBar.style.width = progress + '%';\n    }\n\n    window.APP_BOOTSTRAP_EVENTS.emit('loading:progress', { progress });\n  }\n\n  function hideLoadingScreen() {\n    const loadingScreen = document.getElementById('loading-screen');\n    if (loadingScreen) {\n      loadingScreen.style.display = 'none';\n    }\n  }\n\n  // Initialize\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n      createLoadingScreen();\n      loadAssets();\n    });\n  } else {\n    createLoadingScreen();\n    loadAssets();\n  }\n})();\n`;\n}\n","/**\n * Enhanced Bootstrap Plugin - Server-Side Manifest Integration\n * Created: 2024-12-19\n * Purpose: Provides enhanced bootstrap functionality with unified manifest generation\n *          Works seamlessly with SPA handler and PWA plugin without runtime dependencies\n */\n\nimport type { Plugin } from 'vite';\nimport type { AppBootstrapOptions, AssetManifest } from './types';\nimport { generateAppBootstrap } from './vite-plugin-utils';\n\n/**\n * Enhanced plugin options for bootstrap functionality\n */\nexport interface EnhancedPWAOptions extends AppBootstrapOptions {\n    /** Generate unified manifest for SPA handler integration */\n    generateUnifiedManifest?: boolean;\n    /** Manifest integration options */\n    manifestIntegration?: {\n        /** Include PWA manifest entries */\n        includePWA?: boolean;\n        /** Include service worker entries */\n        includeSW?: boolean;\n        /** Custom manifest entries */\n        customEntries?: Array<{ url: string; revision?: string | null }>;\n    };\n}\n\n/**\n * Enhanced PWA Bootstrap Plugin - Bootstrap only, no PWA integration\n */\nexport function enhancedPWABootstrapPlugin(options: EnhancedPWAOptions = {}): Plugin[] {\n    return [createBootstrapPlugin(options)];\n}\n\n/**\n * Create the bootstrap plugin with enhanced functionality\n */\nfunction createBootstrapPlugin(options: AppBootstrapOptions): Plugin {\n    let buildAssets: AssetManifest;\n\n    // Set defaults\n    const opts: Required<AppBootstrapOptions> = {\n        enableGzip: false,\n        enableProgress: true,\n        enableFallback: true,\n        debugMode: false,\n        appName: 'Application',\n        appIcon: '⚡',\n        loadingTheme: 'gradient',\n        customTheme: '',\n        enableCDNFallback: false,\n        compressionFirst: false,\n        customChunks: {},\n        chunkPriorities: {},\n        assetPrefix: '',\n        bootstrapFileName: 'AppBootstrap.js',\n        gzipLoaderConfig: {\n            debugMode: false,\n            useGzip: false,\n            fallbackToUncompressed: true,\n            timeout: 10000,\n            retries: 3\n        },\n        ...options\n    };\n\n    return {\n        name: 'enhanced-pwa-bootstrap',\n\n        config(config) {\n            // Configure build options\n            if (!config.build) config.build = {};\n            config.build.cssCodeSplit = true;\n\n            // Configure rollup options\n            if (!config.build.rollupOptions) config.build.rollupOptions = {};\n            if (!config.build.rollupOptions.output) config.build.rollupOptions.output = {};\n\n            // Set predictable asset names\n            const output = config.build.rollupOptions.output as any;\n            output.entryFileNames = '[name].js';\n            output.chunkFileNames = '[name].js';\n            output.assetFileNames = (assetInfo: any) => {\n                if (!assetInfo.name) return '[name].[ext]';\n                const info = assetInfo.name.split('.');\n                const ext = info[info.length - 1];\n                if (/\\.(css)$/.test(assetInfo.name)) {\n                    return `assets/[name].${ext}`;\n                }\n                return '[name].[ext]';\n            };\n\n            if (opts.debugMode) {\n                console.log('[enhanced-pwa-bootstrap] App name:', opts.appName);\n                console.log('[enhanced-pwa-bootstrap] Theme:', opts.loadingTheme);\n            }\n\n            return config;\n        },\n\n        transformIndexHtml(html) {\n            console.log('[enhanced-pwa-bootstrap] 🔍 Transforming index.html...');\n\n            // Inject bootstrap script\n            let result = html;\n            if (!result.includes('AppBootstrap.js')) {\n                result = result.replace(\n                    '</head>',\n                    `  <script src=\"/${opts.bootstrapFileName}\"></script>\\n  </head>`\n                );\n            }\n\n            console.log('[enhanced-pwa-bootstrap] ✅ HTML transformation complete');\n            return result;\n        },\n\n        generateBundle(_options: any, bundle: any) {\n            // Analyze build output and create asset manifest\n            buildAssets = analyzeBuildOutput(bundle, opts.assetPrefix);\n\n            // Generate bootstrap script\n            const bootstrapScript = generateAppBootstrap(buildAssets, opts);\n\n            // Add bootstrap script to bundle\n            bundle[opts.bootstrapFileName] = {\n                type: 'chunk',\n                fileName: opts.bootstrapFileName,\n                code: bootstrapScript,\n                isEntry: false\n            };\n\n            // Generate enhanced asset manifest with SPA handler integration\n            const enhancedManifest = generateEnhancedManifest(buildAssets, opts, options);\n\n            // Add asset manifest to bundle\n            bundle['asset-manifest.js'] = {\n                type: 'chunk',\n                fileName: 'asset-manifest.js',\n                code: `window.__ASSET_MANIFEST__ = ${JSON.stringify(enhancedManifest, null, 2)};`,\n                isEntry: false\n            };\n\n            // Generate unified manifest for SPA handler\n            const enhancedOptions = options as EnhancedPWAOptions;\n            if (enhancedOptions.generateUnifiedManifest) {\n                const unifiedManifest = generateUnifiedManifest(enhancedManifest, enhancedOptions);\n                bundle['unified-manifest.json'] = {\n                    type: 'asset',\n                    fileName: 'unified-manifest.json',\n                    source: JSON.stringify(unifiedManifest, null, 2)\n                };\n            }\n\n            console.log('[enhanced-pwa-bootstrap] ✅ Bundle generation complete');\n        }\n    };\n}\n\n/**\n * Generate enhanced asset manifest with SPA handler integration\n */\nfunction generateEnhancedManifest(assetManifest: AssetManifest, opts: Required<AppBootstrapOptions>, options: EnhancedPWAOptions): AssetManifest {\n    const enhancedManifest = {\n        ...assetManifest,\n        buildInfo: {\n            ...assetManifest.buildInfo,\n            appName: opts.appName,\n            compressionEnabled: opts.enableGzip,\n            plugin: 'enhanced-pwa-bootstrap',\n            spaHandlerCompatible: true,\n            timestamp: Date.now()\n        },\n        // SPA Handler specific metadata\n        spaHandler: {\n            rootPath: '/',\n            fallbackFile: 'index.html',\n            enableCompression: opts.enableGzip,\n            enableCaching: true,\n            cacheMaxAge: 86400, // 24 hours\n            systemFiles: [\n                'AppBootstrap.js',\n                'asset-manifest.js',\n                'unified-manifest.json'\n            ]\n        },\n        // PWA integration metadata\n        pwa: {\n            enabled: options.manifestIntegration?.includePWA || false,\n            manifestFile: 'manifest.webmanifest',\n            serviceWorkerFile: 'sw.js',\n            workboxFile: 'workbox-*.js'\n        }\n    };\n\n    return enhancedManifest;\n}\n\n/**\n * Generate unified manifest for SPA handler\n */\nfunction generateUnifiedManifest(enhancedManifest: AssetManifest, options: EnhancedPWAOptions) {\n    const entries: Array<{ url: string; revision?: string | null }> = [];\n\n    // Add all JS and CSS files\n    Object.keys(enhancedManifest.js).forEach(file => {\n        entries.push({ url: enhancedManifest.js[file], revision: null });\n    });\n\n    Object.keys(enhancedManifest.css).forEach(file => {\n        entries.push({ url: enhancedManifest.css[file], revision: null });\n    });\n\n    // Add system files\n    entries.push(\n        { url: '/AppBootstrap.js', revision: null },\n        { url: '/asset-manifest.js', revision: null },\n        { url: '/unified-manifest.json', revision: null }\n    );\n\n    // Add PWA files if enabled\n    if (options.manifestIntegration?.includePWA) {\n        entries.push(\n            { url: '/manifest.webmanifest', revision: null },\n            { url: '/sw.js', revision: null }\n        );\n    }\n\n    // Add custom entries\n    if (options.manifestIntegration?.customEntries) {\n        entries.push(...options.manifestIntegration.customEntries);\n    }\n\n    return {\n        version: '1.0.0',\n        timestamp: Date.now(),\n        entries,\n        metadata: {\n            totalFiles: entries.length,\n            spaHandlerCompatible: true,\n            pwaEnabled: options.manifestIntegration?.includePWA || false\n        }\n    };\n}\n\n/**\n * Analyze build output and create asset manifest\n */\nfunction analyzeBuildOutput(bundle: any, assetPrefix: string = ''): AssetManifest {\n    const js: Record<string, string> = {};\n    const css: Record<string, string> = {};\n    let totalOriginalSize = 0;\n\n    // Process bundle files\n    for (const [fileName, file] of Object.entries(bundle)) {\n        const fileInfo = file as any;\n        const filePath = assetPrefix ? `${assetPrefix}/${fileName}` : `/${fileName}`;\n\n        if (fileName.endsWith('.js')) {\n            js[fileName] = filePath;\n            totalOriginalSize += fileInfo.code?.length || 0;\n        } else if (fileName.endsWith('.css')) {\n            css[fileName] = filePath;\n            totalOriginalSize += fileInfo.source?.length || 0;\n        }\n    }\n\n    return {\n        js,\n        css,\n        loadingSequence: {\n            js: Object.keys(js),\n            css: Object.keys(css)\n        },\n        totalOriginalSize,\n        buildInfo: {\n            timestamp: Date.now(),\n            version: '1.2.0',\n            appName: 'Enhanced PWA App',\n            compressionEnabled: false,\n            chunksGenerated: Object.keys(js).length,\n            plugin: 'enhanced-pwa-bootstrap'\n        }\n    };\n}\n\n// Export the main plugin function\nexport default enhancedPWABootstrapPlugin;\n"]}