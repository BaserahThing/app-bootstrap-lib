'use strict';Object.defineProperty(exports,'__esModule',{value:true});function c(i,r){let{appName:t,loadingTheme:e,customTheme:s}=r,o=s||(e==="gradient"?"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);":"background: #2c3e50;");return `/**
 * AppBootstrap.js - Generated by app-bootstrap-lib
 * Created: ${new Date().toISOString()}
 */

(function() {
  'use strict';

  // Asset manifest
  window.ASSET_MANIFEST = ${JSON.stringify(i,null,2)};

  // Loading state
  window.APP_BOOTSTRAP_LOADING_STATE = {
    isLoaded: false,
    isLoading: true,
    progress: 0,
    currentChunk: '',
    loadedChunks: [],
    totalChunks: ${i.loadingSequence.js.length},
    error: null,
    startTime: Date.now()
  };

  // Event emitter
  window.APP_BOOTSTRAP_EVENTS = {
    listeners: {},
    on: function(event, callback) {
      if (!this.listeners[event]) this.listeners[event] = [];
      this.listeners[event].push(callback);
    },
    emit: function(event, data) {
      if (this.listeners[event]) {
        this.listeners[event].forEach(cb => cb(data));
      }
    }
  };

  // Loading screen
  function createLoadingScreen() {
    const loadingHTML = \`
      <div id="loading-screen" style="
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        ${o}
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        color: white;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        z-index: 9999;
      ">
        <div style="
          width: 40px;
          height: 40px;
          border: 4px solid rgba(255, 255, 255, 0.3);
          border-top: 4px solid white;
          border-radius: 50%;
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        "></div>
        <p id="loading-text">Loading ${t}...</p>
        <div id="loading-progress" style="
          width: 200px;
          height: 4px;
          background: rgba(255, 255, 255, 0.3);
          border-radius: 2px;
          margin-top: 10px;
          overflow: hidden;
        ">
          <div id="progress-bar" style="
            height: 100%;
            background: white;
            width: 0%;
            transition: width 0.3s ease;
          "></div>
        </div>
        <style>
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        </style>
      </div>
    \`;

    document.body.insertAdjacentHTML('afterbegin', loadingHTML);
  }

  // Load assets
  async function loadAssets() {
    const { loadingSequence } = window.ASSET_MANIFEST;
    const totalChunks = loadingSequence.js.length + loadingSequence.css.length;
    let loadedChunks = 0;

    // Load CSS first
    for (const cssFile of loadingSequence.css) {
      try {
        await loadCSS(window.ASSET_MANIFEST.css[cssFile]);
        loadedChunks++;
        updateProgress(loadedChunks, totalChunks);
      } catch (error) {
        console.error('Failed to load CSS:', cssFile, error);
      }
    }

    // Load JS
    for (const jsFile of loadingSequence.js) {
      try {
        await loadJS(window.ASSET_MANIFEST.js[jsFile]);
        loadedChunks++;
        updateProgress(loadedChunks, totalChunks);
      } catch (error) {
        console.error('Failed to load JS:', jsFile, error);
      }
    }

    // Complete
    window.APP_BOOTSTRAP_LOADING_STATE.isLoaded = true;
    window.APP_BOOTSTRAP_LOADING_STATE.isLoading = false;
    window.APP_BOOTSTRAP_READY = true;

    window.APP_BOOTSTRAP_EVENTS.emit('loading:complete');
    hideLoadingScreen();
  }

  function loadCSS(href) {
    return new Promise((resolve, reject) => {
      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = href;
      link.onload = () => resolve();
      link.onerror = () => reject(new Error('CSS load failed: ' + href));
      document.head.appendChild(link);
    });
  }

  function loadJS(src) {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = src;
      script.type = 'module'; // Load as ES module
      script.onload = () => resolve();
      script.onerror = () => reject(new Error('JS load failed: ' + src));
      document.head.appendChild(script);
    });
  }

  function updateProgress(loaded, total) {
    const progress = Math.round((loaded / total) * 100);
    window.APP_BOOTSTRAP_LOADING_STATE.progress = progress;

    const progressBar = document.getElementById('progress-bar');
    if (progressBar) {
      progressBar.style.width = progress + '%';
    }

    window.APP_BOOTSTRAP_EVENTS.emit('loading:progress', { progress });
  }

  function hideLoadingScreen() {
    const loadingScreen = document.getElementById('loading-screen');
    if (loadingScreen) {
      loadingScreen.style.display = 'none';
    }
  }

  // Initialize
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      createLoadingScreen();
      loadAssets();
    });
  } else {
    createLoadingScreen();
    loadAssets();
  }
})();
`}var u={vendor:1,main:2,app:3,chunk:4};function g(i={}){return {vendor:["react","react-dom"],...i}}function m(i,r,t=""){let e={},s={},o=0;for(let[n,l]of Object.entries(i)){let p=l,d=t?`${t}/${n}`:`/${n}`;n.endsWith(".js")?(e[n]=d,o+=p.code?.length||0):n.endsWith(".css")&&(s[n]=d,o+=p.source?.length||0);}let a={js:Object.keys(e).sort((n,l)=>{let p=r[n]||999,d=r[l]||999;return p-d}),css:Object.keys(s)};return {js:e,css:s,loadingSequence:a,totalOriginalSize:o,buildInfo:{timestamp:Date.now(),version:"1.2.0",appName:"PWA App",compressionEnabled:false,chunksGenerated:Object.keys(e).length,plugin:"pwa-bootstrap-kit"}}}function f(i,r){let t=`<script src="/${r.bootstrapFileName}"><\/script>`,e=i;return e=e.replace(/<script type="module" src="\/src\/main\.tsx"><\/script>/g,""),e=e.replace(/<!-- Main Application Entry Point.*?-->/g,""),e=e.replace(/<!-- Development-specific scripts -->[\s\S]*?<\/script>/g,""),e=e.replace(/<!-- Asset Manifest.*?-->\s*<script src="\/asset-manifest\.js"><\/script>/g,""),e.includes("</head>")?e=e.replace("</head>",`  ${t}
</head>`):e=t+`
`+e,e}function h(i={}){let r,t={enableGzip:false,debugMode:false,appName:"Application",loadingTheme:"gradient",customTheme:"",customChunks:{},chunkPriorities:{},assetPrefix:"",bootstrapFileName:"AppBootstrap.js",...i},e={...u,...t.chunkPriorities};return {name:"app-bootstrap-lib",config(s){s.build||(s.build={}),s.build.cssCodeSplit=true,s.build.rollupOptions||(s.build.rollupOptions={}),s.build.rollupOptions.output||(s.build.rollupOptions.output={});let o=s.build.rollupOptions.output;o.entryFileNames="[name].js",o.chunkFileNames="[name].js",o.assetFileNames=n=>{if(!n.name)return "[name].[ext]";let l=n.name.split("."),p=l[l.length-1];return /\.(css)$/.test(n.name)?`assets/[name].${p}`:"[name].[ext]"};let a=g(t.customChunks);return o.manualChunks=a,t.debugMode&&(console.log("[app-bootstrap-lib] App name:",t.appName),console.log("[app-bootstrap-lib] Theme:",t.loadingTheme)),s},transformIndexHtml(s){console.log("[app-bootstrap-lib] \u{1F50D} Transforming index.html..."),console.log("[app-bootstrap-lib] \u{1F4C4} HTML length:",s.length);let o=f(s,t);return console.log("[app-bootstrap-lib] \u2705 HTML transformation complete"),console.log("[app-bootstrap-lib] \u{1F4C4} Result length:",o.length),console.log("[app-bootstrap-lib] \u{1F50D} Contains AppBootstrap.js:",o.includes("AppBootstrap.js")),o},generateBundle(s,o){r=m(o,e,t.assetPrefix);let a={...r,buildInfo:{...r.buildInfo,appName:t.appName,compressionEnabled:t.enableGzip,plugin:"pwa-bootstrap-kit"}};this.emitFile({type:"asset",fileName:"asset-manifest.js",source:`window.ASSET_MANIFEST = ${JSON.stringify(a,null,2)};`});let n=c(a,t);this.emitFile({type:"asset",fileName:t.bootstrapFileName,source:n}),t.debugMode&&(console.log(`[pwa-bootstrap-kit] \u2705 Generated ${t.bootstrapFileName}`),console.log(`[pwa-bootstrap-kit] \u{1F4E6} Assets: ${Object.keys(r.js).length} JS, ${Object.keys(r.css).length} CSS`));}}}exports.appBootstrapPlugin=h;exports.default=h;//# sourceMappingURL=vite.js.map
//# sourceMappingURL=vite.js.map