{"version":3,"sources":["../src/cache.ts"],"names":[],"mappings":"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","file":"cache.js","sourcesContent":["/**\n * Simplified Cache Manager\n * Created: 2024-12-19\n * Purpose: Unified cache management for app bootstrap\n */\n\nimport type { CacheManagerConfig, CacheManager } from './types';\n\nexport class AppCacheManager implements CacheManager {\n    private loadingElement: HTMLElement | null;\n    private config: CacheManagerConfig;\n\n    constructor(config: CacheManagerConfig = {}) {\n        this.config = {\n            cacheName: 'app-bootstrap-v1',\n            appVersion: '1.0.0',\n            enableServiceWorker: true,\n            loadingScreen: {\n                theme: 'gradient'\n            },\n            ...config\n        };\n\n        this.loadingElement = null;\n    }\n\n    async init(): Promise<void> {\n        console.log('App Cache Manager initializing...');\n        this.setupLoadingScreen();\n        await this.loadApp();\n    }\n\n    private setupLoadingScreen(): void {\n        const theme = this.config.loadingScreen?.theme || 'gradient';\n        const customHTML = this.config.loadingScreen?.customHTML;\n\n        const loadingHTML = customHTML || this.getDefaultLoadingHTML(theme);\n        document.body.insertAdjacentHTML('afterbegin', loadingHTML);\n        this.loadingElement = document.getElementById('loading-screen');\n    }\n\n    private getDefaultLoadingHTML(theme: string): string {\n        const baseStyles = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      color: white;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      z-index: 9999;\n    `;\n\n        const background = theme === 'gradient'\n            ? 'background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);'\n            : 'background: #2c3e50;';\n\n        return `\n      <div id=\"loading-screen\" style=\"${baseStyles} ${background}\">\n        <div style=\"\n          width: 40px;\n          height: 40px;\n          border: 4px solid rgba(255, 255, 255, 0.3);\n          border-top: 4px solid white;\n          border-radius: 50%;\n          animation: spin 1s linear infinite;\n          margin-bottom: 20px;\n        \"></div>\n        <p id=\"loading-text\">Loading Application...</p>\n        <style>\n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n        </style>\n      </div>\n    `;\n    }\n\n    updateLoadingText(text: string): void {\n        const loadingText = document.getElementById('loading-text');\n        if (loadingText) {\n            loadingText.textContent = text;\n        }\n    }\n\n    private async loadApp(): Promise<void> {\n        this.updateLoadingText('Loading application...');\n\n        // Wait for app to load, then hide loading screen\n        setTimeout(() => {\n            this.hideLoadingScreen();\n        }, 2000);\n    }\n\n    hideLoadingScreen(): void {\n        if (this.loadingElement) {\n            this.loadingElement.style.display = 'none';\n        }\n    }\n\n    showError(message: string): void {\n        if (this.loadingElement) {\n            this.loadingElement.innerHTML = `\n        <div style=\"text-align: center;\">\n          <h3>Error</h3>\n          <p>${message}</p>\n          <button onclick=\"location.reload()\" style=\"\n            background: white;\n            color: #667eea;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 5px;\n            cursor: pointer;\n            margin-top: 10px;\n          \">Retry</button>\n        </div>\n      `;\n        }\n    }\n\n    retry(): void {\n        location.reload();\n    }\n\n    // Service Worker registration - removed to simplify\n}\n\n// Auto-initialize when DOM is ready\nexport function initializeCacheManager(config?: CacheManagerConfig): AppCacheManager {\n    const manager = new AppCacheManager(config);\n\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', () => {\n            manager.init();\n        });\n    } else {\n        manager.init();\n    }\n\n    return manager;\n}\n\n// Default export\nexport default AppCacheManager;\n"]}