/**
 * Simplified Vite Plugin for App Bootstrap
 * Created: 2024-12-19
 * Purpose: Vite plugin integration for app bootstrap functionality
 */

import type { Plugin } from 'vite';
import type { AppBootstrapOptions, AssetManifest } from './types';

// Default chunk priorities
const DEFAULT_PRIORITIES = {
    'vendor': 1,
    'main': 2,
    'app': 3,
    'chunk': 4
};

/**
 * Generate chunk configuration
 */
function generateChunkConfiguration(customChunks: Record<string, string[]> = {}): Record<string, string[]> {
    const chunks: Record<string, string[]> = {
        vendor: ['react', 'react-dom'],
        ...customChunks
    };

    return chunks;
}

/**
 * Analyze build output and create asset manifest
 */
function analyzeBuildOutput(bundle: any, priorities: Record<string, number>, assetPrefix: string = ''): AssetManifest {
    const js: Record<string, string> = {};
    const css: Record<string, string> = {};
    let totalOriginalSize = 0;

    // Process bundle files
    for (const [fileName, file] of Object.entries(bundle)) {
        const fileInfo = file as any;
        const filePath = assetPrefix + '/' + fileName;

        if (fileName.endsWith('.js')) {
            js[fileName] = filePath;
            totalOriginalSize += fileInfo.code?.length || 0;
        } else if (fileName.endsWith('.css')) {
            css[fileName] = filePath;
            totalOriginalSize += fileInfo.source?.length || 0;
        }
    }

    // Create loading sequence based on priorities
    const loadingSequence = {
        js: Object.keys(js).sort((a, b) => {
            const priorityA = priorities[a] || 999;
            const priorityB = priorities[b] || 999;
            return priorityA - priorityB;
        }),
        css: Object.keys(css)
    };

    return {
        js,
        css,
        loadingSequence,
        totalOriginalSize,
        buildInfo: {
            timestamp: Date.now(),
            version: '1.0.0',
            appName: 'App',
            compressionEnabled: false,
            chunksGenerated: Object.keys(js).length,
            plugin: 'app-bootstrap-lib'
        }
    };
}

/**
 * Transform index.html to include bootstrap script
 */
function transformIndexHtml(html: string, options: Required<AppBootstrapOptions>): string {
    const bootstrapScript = `<script src="/${options.bootstrapFileName}"></script>`;

    // Insert before closing head tag
    if (html.includes('</head>')) {
        return html.replace('</head>', `  ${bootstrapScript}\n</head>`);
    }

    // Insert at the beginning if no head tag
    return bootstrapScript + '\n' + html;
}

/**
 * Generate AppBootstrap.js content
 */
function generateAppBootstrap(assetManifest: AssetManifest, options: Required<AppBootstrapOptions>): string {
    const { appName, loadingTheme, customTheme } = options;

    const themeCSS = customTheme || (loadingTheme === 'gradient'
        ? 'background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);'
        : 'background: #2c3e50;');

    return `/**
 * AppBootstrap.js - Generated by app-bootstrap-lib
 * Created: ${new Date().toISOString()}
 */

(function() {
  'use strict';

  // Asset manifest
  window.ASSET_MANIFEST = ${JSON.stringify(assetManifest, null, 2)};

  // Loading state
  window.APP_BOOTSTRAP_LOADING_STATE = {
    isLoaded: false,
    isLoading: true,
    progress: 0,
    currentChunk: '',
    loadedChunks: [],
    totalChunks: ${assetManifest.loadingSequence.js.length + assetManifest.loadingSequence.css.length},
    error: null,
    startTime: Date.now()
  };

  // Event emitter
  window.APP_BOOTSTRAP_EVENTS = {
    listeners: {},
    on: function(event, callback) {
      if (!this.listeners[event]) this.listeners[event] = [];
      this.listeners[event].push(callback);
    },
    emit: function(event, data) {
      if (this.listeners[event]) {
        this.listeners[event].forEach(cb => cb(data));
      }
    }
  };

  // Loading screen
  function createLoadingScreen() {
    const loadingHTML = \`
      <div id="loading-screen" style="
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        ${themeCSS}
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        color: white;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        z-index: 9999;
      ">
        <div style="
          width: 40px;
          height: 40px;
          border: 4px solid rgba(255, 255, 255, 0.3);
          border-top: 4px solid white;
          border-radius: 50%;
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        "></div>
        <p id="loading-text">Loading ${appName}...</p>
        <div id="loading-progress" style="
          width: 200px;
          height: 4px;
          background: rgba(255, 255, 255, 0.3);
          border-radius: 2px;
          margin-top: 10px;
          overflow: hidden;
        ">
          <div id="progress-bar" style="
            height: 100%;
            background: white;
            width: 0%;
            transition: width 0.3s ease;
          "></div>
        </div>
        <style>
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        </style>
      </div>
    \`;

    document.body.insertAdjacentHTML('afterbegin', loadingHTML);
  }

  // Load assets
  async function loadAssets() {
    const { loadingSequence } = window.ASSET_MANIFEST;
    const totalChunks = loadingSequence.js.length + loadingSequence.css.length;
    let loadedChunks = 0;
    let errors = [];

    // Load CSS first
    for (const cssFile of loadingSequence.css) {
      try {
        await loadCSS(window.ASSET_MANIFEST.css[cssFile]);
        loadedChunks++;
        updateProgress(loadedChunks, totalChunks);
      } catch (error) {
        console.error('Failed to load CSS:', cssFile, error);
        errors.push({ type: 'css', file: cssFile, error: error.message });
      }
    }

    // Load JS
    for (const jsFile of loadingSequence.js) {
      try {
        await loadJS(window.ASSET_MANIFEST.js[jsFile]);
        loadedChunks++;
        updateProgress(loadedChunks, totalChunks);
      } catch (error) {
        console.error('Failed to load JS:', jsFile, error);
        errors.push({ type: 'js', file: jsFile, error: error.message });
      }
    }

    // Complete
    window.APP_BOOTSTRAP_LOADING_STATE.isLoaded = true;
    window.APP_BOOTSTRAP_LOADING_STATE.isLoading = false;
    window.APP_BOOTSTRAP_LOADING_STATE.endTime = Date.now();
    window.APP_BOOTSTRAP_LOADING_STATE.duration = window.APP_BOOTSTRAP_LOADING_STATE.endTime - window.APP_BOOTSTRAP_LOADING_STATE.startTime;

    if (errors.length > 0) {
      window.APP_BOOTSTRAP_LOADING_STATE.error = 'Some assets failed to load: ' + errors.map(e => e.file).join(', ');
    }

    window.APP_BOOTSTRAP_READY = true;

    window.APP_BOOTSTRAP_EVENTS.emit('loading:complete', { errors });
    hideLoadingScreen();
  }

  function loadCSS(href: string): Promise<void> {
    return new Promise((resolve, reject) => {
      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = href;
      link.onload = () => resolve();
      link.onerror = () => reject(new Error('CSS load failed: ' + href));
      document.head.appendChild(link);
    });
  }

  function loadJS(src: string): Promise<void> {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = src;

      // Set type based on file extension or content
      if (src.endsWith('.mjs') || src.includes('type=module')) {
        script.type = 'module';
      } else {
        // Default to regular script for .js files
        script.type = 'text/javascript';
      }

      script.onload = () => resolve();
      script.onerror = () => reject(new Error('JS load failed: ' + src));
      document.head.appendChild(script);
    });
  }

  function updateProgress(loaded: number, total: number) {
    const progress = Math.round((loaded / total) * 100);
    window.APP_BOOTSTRAP_LOADING_STATE.progress = progress;

    const progressBar = document.getElementById('progress-bar');
    if (progressBar) {
      progressBar.style.width = progress + '%';
    }

    window.APP_BOOTSTRAP_EVENTS.emit('loading:progress', { progress });
  }

  function hideLoadingScreen() {
    const loadingScreen = document.getElementById('loading-screen');
    if (loadingScreen) {
      loadingScreen.style.display = 'none';
    }
  }

  // Initialize
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      createLoadingScreen();
      loadAssets();
    });
  } else {
    createLoadingScreen();
    loadAssets();
  }
})();
`;
}

/**
 * Generate development mode files
 */
function generateDevModeFiles(opts: Required<AppBootstrapOptions>, publicDir: string = 'public'): void {
    const fs = require('fs');
    const path = require('path');

    // Create a minimal development asset manifest
    const devAssetManifest = {
        js: {
            'main.js': '/src/main.tsx',
        },
        css: {},
        loadingSequence: {
            js: ['main.js'],
            css: []
        },
        totalOriginalSize: 0,
        buildInfo: {
            timestamp: Date.now(),
            version: '1.0.0-dev',
            appName: opts.appName,
            compressionEnabled: false,
            chunksGenerated: 1,
            plugin: 'app-bootstrap-lib-dev'
        }
    };

    // Generate development AppBootstrap.js
    const devAppBootstrapContent = generateAppBootstrap(devAssetManifest, opts);

    // Write files to public directory
    const fullPublicDir = path.join(process.cwd(), publicDir);

    // Ensure public directory exists
    if (!fs.existsSync(fullPublicDir)) {
        fs.mkdirSync(fullPublicDir, { recursive: true });
    }

    // Write asset-manifest.js
    const assetManifestPath = path.join(fullPublicDir, 'asset-manifest.js');
    const assetManifestContent = `window.ASSET_MANIFEST = ${JSON.stringify(devAssetManifest, null, 2)};`;
    fs.writeFileSync(assetManifestPath, assetManifestContent);

    // Write AppBootstrap.js
    const appBootstrapPath = path.join(fullPublicDir, opts.bootstrapFileName);
    fs.writeFileSync(appBootstrapPath, devAppBootstrapContent);

    if (opts.debugMode) {
        console.log(`[app-bootstrap-lib] 📝 Generated development files:`);
        console.log(`[app-bootstrap-lib] ✅ ${opts.bootstrapFileName}`);
        console.log(`[app-bootstrap-lib] ✅ asset-manifest.js`);
    }
}

/**
 * Main Vite plugin function
 */
export default function appBootstrapPlugin(options: AppBootstrapOptions = {}): Plugin {
    let buildAssets: AssetManifest;

    // Set defaults
    const opts: Required<AppBootstrapOptions> = {
        enableGzip: false,
        enableProgress: true,
        enableFallback: true,
        debugMode: false,
        appName: 'Application',
        appIcon: '⚡',
        loadingTheme: 'gradient',
        customTheme: '',
        enableCDNFallback: false,
        compressionFirst: false,
        customChunks: {},
        chunkPriorities: {},
        assetPrefix: '',
        bootstrapFileName: 'AppBootstrap.js',
        gzipLoaderConfig: {
            debugMode: false,
            useGzip: false,
            fallbackToUncompressed: true,
            timeout: 10000,
            retries: 3
        },
        ...options
    };

    // Merge priorities
    const priorities = { ...DEFAULT_PRIORITIES, ...opts.chunkPriorities };

    return {
        name: 'app-bootstrap-lib',

        configureServer(server) {
            // Generate development mode files when server starts
            console.log('[app-bootstrap-lib] 🚀 Development server starting, generating bootstrap files...');
            const publicDir = server.config.publicDir || 'public';
            console.log('[app-bootstrap-lib] 📁 Public directory:', publicDir);
            generateDevModeFiles(opts, publicDir);
        },

        buildStart() {
            // Generate development mode files when build starts (fallback)
            console.log('[app-bootstrap-lib] 🚀 Build starting, generating bootstrap files...');
            generateDevModeFiles(opts, 'public');
        },

        config(config) {
            // Configure build options
            if (!config.build) config.build = {};
            config.build.cssCodeSplit = true;

            // Configure rollup options
            if (!config.build.rollupOptions) config.build.rollupOptions = {};
            if (!config.build.rollupOptions.output) config.build.rollupOptions.output = {};

            // Set predictable asset names
            const output = config.build.rollupOptions.output as any;
            output.entryFileNames = '[name].js';
            output.chunkFileNames = '[name].js';
            output.assetFileNames = (assetInfo: any) => {
                if (!assetInfo.name) return '[name].[ext]';
                const info = assetInfo.name.split('.');
                const ext = info[info.length - 1];
                if (/\.(css)$/.test(assetInfo.name)) {
                    return `assets/[name].${ext}`;
                }
                return '[name].[ext]';
            };

            // Generate chunks
            const chunks = generateChunkConfiguration(opts.customChunks);
            output.manualChunks = chunks;

            if (opts.debugMode) {
                console.log('[app-bootstrap-lib] App name:', opts.appName);
                console.log('[app-bootstrap-lib] Theme:', opts.loadingTheme);
            }

            return config;
        },

        transformIndexHtml(html) {
            return transformIndexHtml(html, opts);
        },

        generateBundle(_options: any, bundle: any) {
            // Analyze build output
            buildAssets = analyzeBuildOutput(bundle, priorities, opts.assetPrefix);

            // Generate asset manifest
            const assetManifest = {
                ...buildAssets,
                buildInfo: {
                    ...buildAssets.buildInfo,
                    appName: opts.appName,
                    compressionEnabled: opts.enableGzip,
                    plugin: 'app-bootstrap-lib'
                }
            };

            // Add asset manifest to bundle
            this.emitFile({
                type: 'asset',
                fileName: 'asset-manifest.js',
                source: `window.ASSET_MANIFEST = ${JSON.stringify(assetManifest, null, 2)};`
            });

            // Generate AppBootstrap.js
            const appBootstrapContent = generateAppBootstrap(assetManifest, opts);

            this.emitFile({
                type: 'asset',
                fileName: opts.bootstrapFileName,
                source: appBootstrapContent
            });

            if (opts.debugMode) {
                console.log(`[app-bootstrap-lib] ✅ Generated ${opts.bootstrapFileName}`);
                console.log(`[app-bootstrap-lib] 📦 Assets: ${Object.keys(buildAssets.js).length} JS, ${Object.keys(buildAssets.css).length} CSS`);
            }
        }
    };
}

// Named exports
export { appBootstrapPlugin };
